// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef XSQUARE_CHECK_H
#define XSQUARE_CHECK_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xsquare_check_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Axi_lite_rgb_1_n_BaseAddress;
    u32 Axi_lite_rgb_2_BaseAddress;
} XSquare_check_Config;
#endif

typedef struct {
    u32 Axi_lite_rgb_1_n_BaseAddress;
    u32 Axi_lite_rgb_2_BaseAddress;
    u32 IsReady;
} XSquare_check;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XSquare_check_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XSquare_check_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XSquare_check_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XSquare_check_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XSquare_check_Initialize(XSquare_check *InstancePtr, u16 DeviceId);
XSquare_check_Config* XSquare_check_LookupConfig(u16 DeviceId);
int XSquare_check_CfgInitialize(XSquare_check *InstancePtr, XSquare_check_Config *ConfigPtr);
#else
int XSquare_check_Initialize(XSquare_check *InstancePtr, const char* InstanceName);
int XSquare_check_Release(XSquare_check *InstancePtr);
#endif

void XSquare_check_Start(XSquare_check *InstancePtr);
u32 XSquare_check_IsDone(XSquare_check *InstancePtr);
u32 XSquare_check_IsIdle(XSquare_check *InstancePtr);
u32 XSquare_check_IsReady(XSquare_check *InstancePtr);
void XSquare_check_EnableAutoRestart(XSquare_check *InstancePtr);
void XSquare_check_DisableAutoRestart(XSquare_check *InstancePtr);

void XSquare_check_Set_rgb1_in(XSquare_check *InstancePtr, u32 Data);
u32 XSquare_check_Get_rgb1_in(XSquare_check *InstancePtr);
void XSquare_check_Set_n_Mat_out(XSquare_check *InstancePtr, u32 Data);
u32 XSquare_check_Get_n_Mat_out(XSquare_check *InstancePtr);
void XSquare_check_Set_rgb2_in(XSquare_check *InstancePtr, u32 Data);
u32 XSquare_check_Get_rgb2_in(XSquare_check *InstancePtr);

void XSquare_check_InterruptGlobalEnable(XSquare_check *InstancePtr);
void XSquare_check_InterruptGlobalDisable(XSquare_check *InstancePtr);
void XSquare_check_InterruptEnable(XSquare_check *InstancePtr, u32 Mask);
void XSquare_check_InterruptDisable(XSquare_check *InstancePtr, u32 Mask);
void XSquare_check_InterruptClear(XSquare_check *InstancePtr, u32 Mask);
u32 XSquare_check_InterruptGetEnabled(XSquare_check *InstancePtr);
u32 XSquare_check_InterruptGetStatus(XSquare_check *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif
