-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dataflow_in_loop_Loo_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    m_axi_rgb1_in_AWVALID : OUT STD_LOGIC;
    m_axi_rgb1_in_AWREADY : IN STD_LOGIC;
    m_axi_rgb1_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb1_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb1_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb1_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rgb1_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb1_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb1_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb1_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rgb1_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb1_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb1_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb1_in_WVALID : OUT STD_LOGIC;
    m_axi_rgb1_in_WREADY : IN STD_LOGIC;
    m_axi_rgb1_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb1_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb1_in_WLAST : OUT STD_LOGIC;
    m_axi_rgb1_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb1_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb1_in_ARVALID : OUT STD_LOGIC;
    m_axi_rgb1_in_ARREADY : IN STD_LOGIC;
    m_axi_rgb1_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb1_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb1_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb1_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rgb1_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb1_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb1_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb1_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rgb1_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb1_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb1_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb1_in_RVALID : IN STD_LOGIC;
    m_axi_rgb1_in_RREADY : OUT STD_LOGIC;
    m_axi_rgb1_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb1_in_RLAST : IN STD_LOGIC;
    m_axi_rgb1_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb1_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb1_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb1_in_BVALID : IN STD_LOGIC;
    m_axi_rgb1_in_BREADY : OUT STD_LOGIC;
    m_axi_rgb1_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb1_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb1_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    rgb1_in1 : IN STD_LOGIC_VECTOR (29 downto 0);
    row_0_i_i : IN STD_LOGIC_VECTOR (6 downto 0);
    m_axi_rgb2_in_AWVALID : OUT STD_LOGIC;
    m_axi_rgb2_in_AWREADY : IN STD_LOGIC;
    m_axi_rgb2_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb2_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb2_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rgb2_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb2_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb2_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb2_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rgb2_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb2_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb2_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_WVALID : OUT STD_LOGIC;
    m_axi_rgb2_in_WREADY : IN STD_LOGIC;
    m_axi_rgb2_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb2_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb2_in_WLAST : OUT STD_LOGIC;
    m_axi_rgb2_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_ARVALID : OUT STD_LOGIC;
    m_axi_rgb2_in_ARREADY : IN STD_LOGIC;
    m_axi_rgb2_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb2_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb2_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rgb2_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb2_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb2_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb2_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rgb2_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb2_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb2_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_RVALID : IN STD_LOGIC;
    m_axi_rgb2_in_RREADY : OUT STD_LOGIC;
    m_axi_rgb2_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb2_in_RLAST : IN STD_LOGIC;
    m_axi_rgb2_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb2_in_BVALID : IN STD_LOGIC;
    m_axi_rgb2_in_BREADY : OUT STD_LOGIC;
    m_axi_rgb2_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb2_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    rgb2_in3 : IN STD_LOGIC_VECTOR (29 downto 0);
    n_Mat_buff_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    n_Mat_buff_ce0 : OUT STD_LOGIC;
    n_Mat_buff_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    n_Mat_buff_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
    n_Mat_buff_we0 : OUT STD_LOGIC;
    n_Mat_buff_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    n_Mat_buff_ce1 : OUT STD_LOGIC;
    n_Mat_buff_d1 : OUT STD_LOGIC_VECTOR (17 downto 0);
    n_Mat_buff_q1 : IN STD_LOGIC_VECTOR (17 downto 0);
    n_Mat_buff_we1 : OUT STD_LOGIC;
    row_0_i_i_ap_vld : IN STD_LOGIC;
    rgb1_in1_ap_vld : IN STD_LOGIC;
    rgb2_in3_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of dataflow_in_loop_Loo_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal rgb1_buff_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rgb1_buff_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rgb2_buff_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rgb2_buff_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_Loo_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_Loo_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_Loo_U0_ap_continue : STD_LOGIC;
    signal dataflow_in_loop_Loo_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_Loo_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_Loo_U0_row_0_i_i_channel_din : STD_LOGIC_VECTOR (5 downto 0);
    signal dataflow_in_loop_Loo_U0_row_0_i_i_channel_write : STD_LOGIC;
    signal dataflow_in_loop_Loo_U0_row_0_i_i_channel1_din : STD_LOGIC_VECTOR (5 downto 0);
    signal dataflow_in_loop_Loo_U0_row_0_i_i_channel1_write : STD_LOGIC;
    signal dataflow_in_loop_Loo_U0_rgb1_in1_out_din : STD_LOGIC_VECTOR (29 downto 0);
    signal dataflow_in_loop_Loo_U0_rgb1_in1_out_write : STD_LOGIC;
    signal dataflow_in_loop_Loo_U0_rgb2_in3_out_din : STD_LOGIC_VECTOR (29 downto 0);
    signal dataflow_in_loop_Loo_U0_rgb2_in3_out_write : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_ap_start : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_ap_done : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_ap_continue : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_ap_idle : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_ap_ready : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWVALID : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_WVALID : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_WLAST : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARVALID : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_RREADY : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_BREADY : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_rgb1_in1_read : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_row_0_i_i_channel_read : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_rgb1_buff_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_rgb1_buff_ce0 : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_rgb1_buff_we0 : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_rgb1_buff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_row_0_i_i_channel2_din : STD_LOGIC_VECTOR (5 downto 0);
    signal memcpy_rgb1_buff_rgb_U0_row_0_i_i_channel2_write : STD_LOGIC;
    signal ap_channel_done_rgb1_buff : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_rgb1_buff_full_n : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_ap_start : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_ap_done : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_ap_continue : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_ap_idle : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_ap_ready : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWVALID : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_WVALID : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_WLAST : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARVALID : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_RREADY : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_BREADY : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_rgb2_in3_read : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_row_0_i_i_channel1_read : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_rgb2_buff_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal memcpy_rgb2_buff_rgb_U0_rgb2_buff_ce0 : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_rgb2_buff_we0 : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_rgb2_buff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_rgb2_buff : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_rgb2_buff_full_n : STD_LOGIC;
    signal Loop_Block_Cols_proc_U0_ap_start : STD_LOGIC;
    signal Loop_Block_Cols_proc_U0_ap_done : STD_LOGIC;
    signal Loop_Block_Cols_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_Block_Cols_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_Block_Cols_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_Block_Cols_proc_U0_row_0_i_i_read : STD_LOGIC;
    signal Loop_Block_Cols_proc_U0_n_Mat_buff_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal Loop_Block_Cols_proc_U0_n_Mat_buff_ce0 : STD_LOGIC;
    signal Loop_Block_Cols_proc_U0_n_Mat_buff_we0 : STD_LOGIC;
    signal Loop_Block_Cols_proc_U0_n_Mat_buff_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal Loop_Block_Cols_proc_U0_rgb1_buff1_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal Loop_Block_Cols_proc_U0_rgb1_buff1_ce0 : STD_LOGIC;
    signal Loop_Block_Cols_proc_U0_rgb2_buff2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal Loop_Block_Cols_proc_U0_rgb2_buff2_ce0 : STD_LOGIC;
    signal ap_hs_continue : STD_LOGIC;
    signal rgb1_buff_i_full_n : STD_LOGIC;
    signal rgb1_buff_t_empty_n : STD_LOGIC;
    signal rgb2_buff_i_full_n : STD_LOGIC;
    signal rgb2_buff_t_empty_n : STD_LOGIC;
    signal row_0_i_i_channel_full_n : STD_LOGIC;
    signal row_0_i_i_channel_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal row_0_i_i_channel_empty_n : STD_LOGIC;
    signal row_0_i_i_channel1_full_n : STD_LOGIC;
    signal row_0_i_i_channel1_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal row_0_i_i_channel1_empty_n : STD_LOGIC;
    signal rgb1_in1_channel_full_n : STD_LOGIC;
    signal rgb1_in1_channel_dout : STD_LOGIC_VECTOR (29 downto 0);
    signal rgb1_in1_channel_empty_n : STD_LOGIC;
    signal rgb2_in3_channel_full_n : STD_LOGIC;
    signal rgb2_in3_channel_dout : STD_LOGIC_VECTOR (29 downto 0);
    signal rgb2_in3_channel_empty_n : STD_LOGIC;
    signal row_0_i_i_channel2_full_n : STD_LOGIC;
    signal row_0_i_i_channel2_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal row_0_i_i_channel2_empty_n : STD_LOGIC;
    signal ap_hs_done : STD_LOGIC;
    signal ap_hs_ready : STD_LOGIC;
    signal ap_sync_reg_memcpy_rgb1_buff_rgb_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_memcpy_rgb1_buff_rgb_U0_ap_ready : STD_LOGIC;
    signal memcpy_rgb1_buff_rgb_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_dataflow_in_loop_Loo_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_dataflow_in_loop_Loo_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_Loo_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_memcpy_rgb2_buff_rgb_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_memcpy_rgb2_buff_rgb_U0_ap_ready : STD_LOGIC;
    signal memcpy_rgb2_buff_rgb_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_memcpy_rgb1_buff_rgb_U0_ap_start : STD_LOGIC;
    signal ap_sync_dataflow_in_loop_Loo_U0_ap_start : STD_LOGIC;
    signal ap_sync_memcpy_rgb2_buff_rgb_U0_ap_start : STD_LOGIC;

    component dataflow_in_loop_Loo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        row_0_i_i : IN STD_LOGIC_VECTOR (6 downto 0);
        row_0_i_i_channel_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        row_0_i_i_channel_full_n : IN STD_LOGIC;
        row_0_i_i_channel_write : OUT STD_LOGIC;
        row_0_i_i_channel1_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        row_0_i_i_channel1_full_n : IN STD_LOGIC;
        row_0_i_i_channel1_write : OUT STD_LOGIC;
        rgb1_in1 : IN STD_LOGIC_VECTOR (29 downto 0);
        rgb2_in3 : IN STD_LOGIC_VECTOR (29 downto 0);
        rgb1_in1_out_din : OUT STD_LOGIC_VECTOR (29 downto 0);
        rgb1_in1_out_full_n : IN STD_LOGIC;
        rgb1_in1_out_write : OUT STD_LOGIC;
        rgb2_in3_out_din : OUT STD_LOGIC_VECTOR (29 downto 0);
        rgb2_in3_out_full_n : IN STD_LOGIC;
        rgb2_in3_out_write : OUT STD_LOGIC );
    end component;


    component memcpy_rgb1_buff_rgb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_rgb1_in_AWVALID : OUT STD_LOGIC;
        m_axi_rgb1_in_AWREADY : IN STD_LOGIC;
        m_axi_rgb1_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb1_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb1_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rgb1_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb1_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb1_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb1_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rgb1_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb1_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb1_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_WVALID : OUT STD_LOGIC;
        m_axi_rgb1_in_WREADY : IN STD_LOGIC;
        m_axi_rgb1_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb1_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb1_in_WLAST : OUT STD_LOGIC;
        m_axi_rgb1_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_ARVALID : OUT STD_LOGIC;
        m_axi_rgb1_in_ARREADY : IN STD_LOGIC;
        m_axi_rgb1_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb1_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb1_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rgb1_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb1_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb1_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb1_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rgb1_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb1_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb1_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_RVALID : IN STD_LOGIC;
        m_axi_rgb1_in_RREADY : OUT STD_LOGIC;
        m_axi_rgb1_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb1_in_RLAST : IN STD_LOGIC;
        m_axi_rgb1_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb1_in_BVALID : IN STD_LOGIC;
        m_axi_rgb1_in_BREADY : OUT STD_LOGIC;
        m_axi_rgb1_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb1_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        rgb1_in1_dout : IN STD_LOGIC_VECTOR (29 downto 0);
        rgb1_in1_empty_n : IN STD_LOGIC;
        rgb1_in1_read : OUT STD_LOGIC;
        row_0_i_i_channel_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        row_0_i_i_channel_empty_n : IN STD_LOGIC;
        row_0_i_i_channel_read : OUT STD_LOGIC;
        rgb1_buff_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        rgb1_buff_ce0 : OUT STD_LOGIC;
        rgb1_buff_we0 : OUT STD_LOGIC;
        rgb1_buff_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        row_0_i_i_channel2_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        row_0_i_i_channel2_full_n : IN STD_LOGIC;
        row_0_i_i_channel2_write : OUT STD_LOGIC );
    end component;


    component memcpy_rgb2_buff_rgb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_rgb2_in_AWVALID : OUT STD_LOGIC;
        m_axi_rgb2_in_AWREADY : IN STD_LOGIC;
        m_axi_rgb2_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb2_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb2_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rgb2_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb2_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb2_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb2_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rgb2_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb2_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb2_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_WVALID : OUT STD_LOGIC;
        m_axi_rgb2_in_WREADY : IN STD_LOGIC;
        m_axi_rgb2_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb2_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb2_in_WLAST : OUT STD_LOGIC;
        m_axi_rgb2_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_ARVALID : OUT STD_LOGIC;
        m_axi_rgb2_in_ARREADY : IN STD_LOGIC;
        m_axi_rgb2_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb2_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb2_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rgb2_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb2_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb2_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb2_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rgb2_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb2_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb2_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_RVALID : IN STD_LOGIC;
        m_axi_rgb2_in_RREADY : OUT STD_LOGIC;
        m_axi_rgb2_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb2_in_RLAST : IN STD_LOGIC;
        m_axi_rgb2_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb2_in_BVALID : IN STD_LOGIC;
        m_axi_rgb2_in_BREADY : OUT STD_LOGIC;
        m_axi_rgb2_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb2_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        rgb2_in3_dout : IN STD_LOGIC_VECTOR (29 downto 0);
        rgb2_in3_empty_n : IN STD_LOGIC;
        rgb2_in3_read : OUT STD_LOGIC;
        row_0_i_i_channel1_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        row_0_i_i_channel1_empty_n : IN STD_LOGIC;
        row_0_i_i_channel1_read : OUT STD_LOGIC;
        rgb2_buff_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        rgb2_buff_ce0 : OUT STD_LOGIC;
        rgb2_buff_we0 : OUT STD_LOGIC;
        rgb2_buff_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Loop_Block_Cols_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        row_0_i_i_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        row_0_i_i_empty_n : IN STD_LOGIC;
        row_0_i_i_read : OUT STD_LOGIC;
        n_Mat_buff_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        n_Mat_buff_ce0 : OUT STD_LOGIC;
        n_Mat_buff_we0 : OUT STD_LOGIC;
        n_Mat_buff_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        rgb1_buff1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        rgb1_buff1_ce0 : OUT STD_LOGIC;
        rgb1_buff1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        rgb2_buff2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        rgb2_buff2_ce0 : OUT STD_LOGIC;
        rgb2_buff2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dataflow_in_loop_dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component dataflow_in_loop_fYi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (5 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component dataflow_in_loop_g8j IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (5 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component dataflow_in_loop_hbi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (29 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (29 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component dataflow_in_loop_ibs IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (29 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (29 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component dataflow_in_loop_jbC IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (5 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    rgb1_buff_U : component dataflow_in_loop_dEe
    generic map (
        DataWidth => 32,
        AddressRange => 4800,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => memcpy_rgb1_buff_rgb_U0_rgb1_buff_address0,
        i_ce0 => memcpy_rgb1_buff_rgb_U0_rgb1_buff_ce0,
        i_we0 => memcpy_rgb1_buff_rgb_U0_rgb1_buff_we0,
        i_d0 => memcpy_rgb1_buff_rgb_U0_rgb1_buff_d0,
        i_q0 => rgb1_buff_i_q0,
        t_address0 => Loop_Block_Cols_proc_U0_rgb1_buff1_address0,
        t_ce0 => Loop_Block_Cols_proc_U0_rgb1_buff1_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => rgb1_buff_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => rgb1_buff_i_full_n,
        i_write => memcpy_rgb1_buff_rgb_U0_ap_done,
        t_empty_n => rgb1_buff_t_empty_n,
        t_read => Loop_Block_Cols_proc_U0_ap_ready);

    rgb2_buff_U : component dataflow_in_loop_dEe
    generic map (
        DataWidth => 32,
        AddressRange => 4800,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => memcpy_rgb2_buff_rgb_U0_rgb2_buff_address0,
        i_ce0 => memcpy_rgb2_buff_rgb_U0_rgb2_buff_ce0,
        i_we0 => memcpy_rgb2_buff_rgb_U0_rgb2_buff_we0,
        i_d0 => memcpy_rgb2_buff_rgb_U0_rgb2_buff_d0,
        i_q0 => rgb2_buff_i_q0,
        t_address0 => Loop_Block_Cols_proc_U0_rgb2_buff2_address0,
        t_ce0 => Loop_Block_Cols_proc_U0_rgb2_buff2_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => rgb2_buff_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => rgb2_buff_i_full_n,
        i_write => memcpy_rgb2_buff_rgb_U0_ap_done,
        t_empty_n => rgb2_buff_t_empty_n,
        t_read => Loop_Block_Cols_proc_U0_ap_ready);

    dataflow_in_loop_Loo_U0 : component dataflow_in_loop_Loo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dataflow_in_loop_Loo_U0_ap_start,
        ap_done => dataflow_in_loop_Loo_U0_ap_done,
        ap_continue => dataflow_in_loop_Loo_U0_ap_continue,
        ap_idle => dataflow_in_loop_Loo_U0_ap_idle,
        ap_ready => dataflow_in_loop_Loo_U0_ap_ready,
        row_0_i_i => row_0_i_i,
        row_0_i_i_channel_din => dataflow_in_loop_Loo_U0_row_0_i_i_channel_din,
        row_0_i_i_channel_full_n => row_0_i_i_channel_full_n,
        row_0_i_i_channel_write => dataflow_in_loop_Loo_U0_row_0_i_i_channel_write,
        row_0_i_i_channel1_din => dataflow_in_loop_Loo_U0_row_0_i_i_channel1_din,
        row_0_i_i_channel1_full_n => row_0_i_i_channel1_full_n,
        row_0_i_i_channel1_write => dataflow_in_loop_Loo_U0_row_0_i_i_channel1_write,
        rgb1_in1 => rgb1_in1,
        rgb2_in3 => rgb2_in3,
        rgb1_in1_out_din => dataflow_in_loop_Loo_U0_rgb1_in1_out_din,
        rgb1_in1_out_full_n => rgb1_in1_channel_full_n,
        rgb1_in1_out_write => dataflow_in_loop_Loo_U0_rgb1_in1_out_write,
        rgb2_in3_out_din => dataflow_in_loop_Loo_U0_rgb2_in3_out_din,
        rgb2_in3_out_full_n => rgb2_in3_channel_full_n,
        rgb2_in3_out_write => dataflow_in_loop_Loo_U0_rgb2_in3_out_write);

    memcpy_rgb1_buff_rgb_U0 : component memcpy_rgb1_buff_rgb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => memcpy_rgb1_buff_rgb_U0_ap_start,
        ap_done => memcpy_rgb1_buff_rgb_U0_ap_done,
        ap_continue => memcpy_rgb1_buff_rgb_U0_ap_continue,
        ap_idle => memcpy_rgb1_buff_rgb_U0_ap_idle,
        ap_ready => memcpy_rgb1_buff_rgb_U0_ap_ready,
        m_axi_rgb1_in_AWVALID => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWVALID,
        m_axi_rgb1_in_AWREADY => ap_const_logic_0,
        m_axi_rgb1_in_AWADDR => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWADDR,
        m_axi_rgb1_in_AWID => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWID,
        m_axi_rgb1_in_AWLEN => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWLEN,
        m_axi_rgb1_in_AWSIZE => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWSIZE,
        m_axi_rgb1_in_AWBURST => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWBURST,
        m_axi_rgb1_in_AWLOCK => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWLOCK,
        m_axi_rgb1_in_AWCACHE => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWCACHE,
        m_axi_rgb1_in_AWPROT => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWPROT,
        m_axi_rgb1_in_AWQOS => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWQOS,
        m_axi_rgb1_in_AWREGION => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWREGION,
        m_axi_rgb1_in_AWUSER => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_AWUSER,
        m_axi_rgb1_in_WVALID => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_WVALID,
        m_axi_rgb1_in_WREADY => ap_const_logic_0,
        m_axi_rgb1_in_WDATA => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_WDATA,
        m_axi_rgb1_in_WSTRB => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_WSTRB,
        m_axi_rgb1_in_WLAST => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_WLAST,
        m_axi_rgb1_in_WID => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_WID,
        m_axi_rgb1_in_WUSER => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_WUSER,
        m_axi_rgb1_in_ARVALID => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARVALID,
        m_axi_rgb1_in_ARREADY => m_axi_rgb1_in_ARREADY,
        m_axi_rgb1_in_ARADDR => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARADDR,
        m_axi_rgb1_in_ARID => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARID,
        m_axi_rgb1_in_ARLEN => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARLEN,
        m_axi_rgb1_in_ARSIZE => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARSIZE,
        m_axi_rgb1_in_ARBURST => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARBURST,
        m_axi_rgb1_in_ARLOCK => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARLOCK,
        m_axi_rgb1_in_ARCACHE => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARCACHE,
        m_axi_rgb1_in_ARPROT => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARPROT,
        m_axi_rgb1_in_ARQOS => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARQOS,
        m_axi_rgb1_in_ARREGION => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARREGION,
        m_axi_rgb1_in_ARUSER => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARUSER,
        m_axi_rgb1_in_RVALID => m_axi_rgb1_in_RVALID,
        m_axi_rgb1_in_RREADY => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_RREADY,
        m_axi_rgb1_in_RDATA => m_axi_rgb1_in_RDATA,
        m_axi_rgb1_in_RLAST => m_axi_rgb1_in_RLAST,
        m_axi_rgb1_in_RID => m_axi_rgb1_in_RID,
        m_axi_rgb1_in_RUSER => m_axi_rgb1_in_RUSER,
        m_axi_rgb1_in_RRESP => m_axi_rgb1_in_RRESP,
        m_axi_rgb1_in_BVALID => ap_const_logic_0,
        m_axi_rgb1_in_BREADY => memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_BREADY,
        m_axi_rgb1_in_BRESP => ap_const_lv2_0,
        m_axi_rgb1_in_BID => ap_const_lv1_0,
        m_axi_rgb1_in_BUSER => ap_const_lv1_0,
        rgb1_in1_dout => rgb1_in1_channel_dout,
        rgb1_in1_empty_n => rgb1_in1_channel_empty_n,
        rgb1_in1_read => memcpy_rgb1_buff_rgb_U0_rgb1_in1_read,
        row_0_i_i_channel_dout => row_0_i_i_channel_dout,
        row_0_i_i_channel_empty_n => row_0_i_i_channel_empty_n,
        row_0_i_i_channel_read => memcpy_rgb1_buff_rgb_U0_row_0_i_i_channel_read,
        rgb1_buff_address0 => memcpy_rgb1_buff_rgb_U0_rgb1_buff_address0,
        rgb1_buff_ce0 => memcpy_rgb1_buff_rgb_U0_rgb1_buff_ce0,
        rgb1_buff_we0 => memcpy_rgb1_buff_rgb_U0_rgb1_buff_we0,
        rgb1_buff_d0 => memcpy_rgb1_buff_rgb_U0_rgb1_buff_d0,
        row_0_i_i_channel2_din => memcpy_rgb1_buff_rgb_U0_row_0_i_i_channel2_din,
        row_0_i_i_channel2_full_n => row_0_i_i_channel2_full_n,
        row_0_i_i_channel2_write => memcpy_rgb1_buff_rgb_U0_row_0_i_i_channel2_write);

    memcpy_rgb2_buff_rgb_U0 : component memcpy_rgb2_buff_rgb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => memcpy_rgb2_buff_rgb_U0_ap_start,
        ap_done => memcpy_rgb2_buff_rgb_U0_ap_done,
        ap_continue => memcpy_rgb2_buff_rgb_U0_ap_continue,
        ap_idle => memcpy_rgb2_buff_rgb_U0_ap_idle,
        ap_ready => memcpy_rgb2_buff_rgb_U0_ap_ready,
        m_axi_rgb2_in_AWVALID => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWVALID,
        m_axi_rgb2_in_AWREADY => ap_const_logic_0,
        m_axi_rgb2_in_AWADDR => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWADDR,
        m_axi_rgb2_in_AWID => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWID,
        m_axi_rgb2_in_AWLEN => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWLEN,
        m_axi_rgb2_in_AWSIZE => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWSIZE,
        m_axi_rgb2_in_AWBURST => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWBURST,
        m_axi_rgb2_in_AWLOCK => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWLOCK,
        m_axi_rgb2_in_AWCACHE => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWCACHE,
        m_axi_rgb2_in_AWPROT => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWPROT,
        m_axi_rgb2_in_AWQOS => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWQOS,
        m_axi_rgb2_in_AWREGION => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWREGION,
        m_axi_rgb2_in_AWUSER => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_AWUSER,
        m_axi_rgb2_in_WVALID => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_WVALID,
        m_axi_rgb2_in_WREADY => ap_const_logic_0,
        m_axi_rgb2_in_WDATA => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_WDATA,
        m_axi_rgb2_in_WSTRB => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_WSTRB,
        m_axi_rgb2_in_WLAST => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_WLAST,
        m_axi_rgb2_in_WID => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_WID,
        m_axi_rgb2_in_WUSER => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_WUSER,
        m_axi_rgb2_in_ARVALID => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARVALID,
        m_axi_rgb2_in_ARREADY => m_axi_rgb2_in_ARREADY,
        m_axi_rgb2_in_ARADDR => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARADDR,
        m_axi_rgb2_in_ARID => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARID,
        m_axi_rgb2_in_ARLEN => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARLEN,
        m_axi_rgb2_in_ARSIZE => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARSIZE,
        m_axi_rgb2_in_ARBURST => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARBURST,
        m_axi_rgb2_in_ARLOCK => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARLOCK,
        m_axi_rgb2_in_ARCACHE => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARCACHE,
        m_axi_rgb2_in_ARPROT => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARPROT,
        m_axi_rgb2_in_ARQOS => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARQOS,
        m_axi_rgb2_in_ARREGION => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARREGION,
        m_axi_rgb2_in_ARUSER => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARUSER,
        m_axi_rgb2_in_RVALID => m_axi_rgb2_in_RVALID,
        m_axi_rgb2_in_RREADY => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_RREADY,
        m_axi_rgb2_in_RDATA => m_axi_rgb2_in_RDATA,
        m_axi_rgb2_in_RLAST => m_axi_rgb2_in_RLAST,
        m_axi_rgb2_in_RID => m_axi_rgb2_in_RID,
        m_axi_rgb2_in_RUSER => m_axi_rgb2_in_RUSER,
        m_axi_rgb2_in_RRESP => m_axi_rgb2_in_RRESP,
        m_axi_rgb2_in_BVALID => ap_const_logic_0,
        m_axi_rgb2_in_BREADY => memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_BREADY,
        m_axi_rgb2_in_BRESP => ap_const_lv2_0,
        m_axi_rgb2_in_BID => ap_const_lv1_0,
        m_axi_rgb2_in_BUSER => ap_const_lv1_0,
        rgb2_in3_dout => rgb2_in3_channel_dout,
        rgb2_in3_empty_n => rgb2_in3_channel_empty_n,
        rgb2_in3_read => memcpy_rgb2_buff_rgb_U0_rgb2_in3_read,
        row_0_i_i_channel1_dout => row_0_i_i_channel1_dout,
        row_0_i_i_channel1_empty_n => row_0_i_i_channel1_empty_n,
        row_0_i_i_channel1_read => memcpy_rgb2_buff_rgb_U0_row_0_i_i_channel1_read,
        rgb2_buff_address0 => memcpy_rgb2_buff_rgb_U0_rgb2_buff_address0,
        rgb2_buff_ce0 => memcpy_rgb2_buff_rgb_U0_rgb2_buff_ce0,
        rgb2_buff_we0 => memcpy_rgb2_buff_rgb_U0_rgb2_buff_we0,
        rgb2_buff_d0 => memcpy_rgb2_buff_rgb_U0_rgb2_buff_d0);

    Loop_Block_Cols_proc_U0 : component Loop_Block_Cols_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_Block_Cols_proc_U0_ap_start,
        ap_done => Loop_Block_Cols_proc_U0_ap_done,
        ap_continue => Loop_Block_Cols_proc_U0_ap_continue,
        ap_idle => Loop_Block_Cols_proc_U0_ap_idle,
        ap_ready => Loop_Block_Cols_proc_U0_ap_ready,
        row_0_i_i_dout => row_0_i_i_channel2_dout,
        row_0_i_i_empty_n => row_0_i_i_channel2_empty_n,
        row_0_i_i_read => Loop_Block_Cols_proc_U0_row_0_i_i_read,
        n_Mat_buff_address0 => Loop_Block_Cols_proc_U0_n_Mat_buff_address0,
        n_Mat_buff_ce0 => Loop_Block_Cols_proc_U0_n_Mat_buff_ce0,
        n_Mat_buff_we0 => Loop_Block_Cols_proc_U0_n_Mat_buff_we0,
        n_Mat_buff_d0 => Loop_Block_Cols_proc_U0_n_Mat_buff_d0,
        rgb1_buff1_address0 => Loop_Block_Cols_proc_U0_rgb1_buff1_address0,
        rgb1_buff1_ce0 => Loop_Block_Cols_proc_U0_rgb1_buff1_ce0,
        rgb1_buff1_q0 => rgb1_buff_t_q0,
        rgb2_buff2_address0 => Loop_Block_Cols_proc_U0_rgb2_buff2_address0,
        rgb2_buff2_ce0 => Loop_Block_Cols_proc_U0_rgb2_buff2_ce0,
        rgb2_buff2_q0 => rgb2_buff_t_q0);

    row_0_i_i_channel_U : component dataflow_in_loop_fYi
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_Loo_U0_row_0_i_i_channel_din,
        if_full_n => row_0_i_i_channel_full_n,
        if_write => dataflow_in_loop_Loo_U0_row_0_i_i_channel_write,
        if_dout => row_0_i_i_channel_dout,
        if_empty_n => row_0_i_i_channel_empty_n,
        if_read => memcpy_rgb1_buff_rgb_U0_row_0_i_i_channel_read);

    row_0_i_i_channel1_U : component dataflow_in_loop_g8j
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_Loo_U0_row_0_i_i_channel1_din,
        if_full_n => row_0_i_i_channel1_full_n,
        if_write => dataflow_in_loop_Loo_U0_row_0_i_i_channel1_write,
        if_dout => row_0_i_i_channel1_dout,
        if_empty_n => row_0_i_i_channel1_empty_n,
        if_read => memcpy_rgb2_buff_rgb_U0_row_0_i_i_channel1_read);

    rgb1_in1_channel_U : component dataflow_in_loop_hbi
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_Loo_U0_rgb1_in1_out_din,
        if_full_n => rgb1_in1_channel_full_n,
        if_write => dataflow_in_loop_Loo_U0_rgb1_in1_out_write,
        if_dout => rgb1_in1_channel_dout,
        if_empty_n => rgb1_in1_channel_empty_n,
        if_read => memcpy_rgb1_buff_rgb_U0_rgb1_in1_read);

    rgb2_in3_channel_U : component dataflow_in_loop_ibs
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_Loo_U0_rgb2_in3_out_din,
        if_full_n => rgb2_in3_channel_full_n,
        if_write => dataflow_in_loop_Loo_U0_rgb2_in3_out_write,
        if_dout => rgb2_in3_channel_dout,
        if_empty_n => rgb2_in3_channel_empty_n,
        if_read => memcpy_rgb2_buff_rgb_U0_rgb2_in3_read);

    row_0_i_i_channel2_U : component dataflow_in_loop_jbC
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => memcpy_rgb1_buff_rgb_U0_row_0_i_i_channel2_din,
        if_full_n => row_0_i_i_channel2_full_n,
        if_write => memcpy_rgb1_buff_rgb_U0_row_0_i_i_channel2_write,
        if_dout => row_0_i_i_channel2_dout,
        if_empty_n => row_0_i_i_channel2_empty_n,
        if_read => Loop_Block_Cols_proc_U0_row_0_i_i_read);





    ap_sync_reg_dataflow_in_loop_Loo_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_dataflow_in_loop_Loo_U0_ap_ready <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (ap_start and ap_hs_ready))) then 
                    ap_sync_reg_dataflow_in_loop_Loo_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_dataflow_in_loop_Loo_U0_ap_ready <= ap_sync_dataflow_in_loop_Loo_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_memcpy_rgb1_buff_rgb_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_memcpy_rgb1_buff_rgb_U0_ap_ready <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (ap_start and ap_hs_ready))) then 
                    ap_sync_reg_memcpy_rgb1_buff_rgb_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_memcpy_rgb1_buff_rgb_U0_ap_ready <= ap_sync_memcpy_rgb1_buff_rgb_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_memcpy_rgb2_buff_rgb_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_memcpy_rgb2_buff_rgb_U0_ap_ready <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (ap_start and ap_hs_ready))) then 
                    ap_sync_reg_memcpy_rgb2_buff_rgb_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_memcpy_rgb2_buff_rgb_U0_ap_ready <= ap_sync_memcpy_rgb2_buff_rgb_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    dataflow_in_loop_Loo_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_hs_ready) and (ap_const_logic_0 = dataflow_in_loop_Loo_U0_ap_ready))) then 
                dataflow_in_loop_Loo_U0_ap_ready_count <= std_logic_vector(unsigned(dataflow_in_loop_Loo_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_0 = ap_hs_ready) and (ap_const_logic_1 = dataflow_in_loop_Loo_U0_ap_ready))) then 
                dataflow_in_loop_Loo_U0_ap_ready_count <= std_logic_vector(unsigned(dataflow_in_loop_Loo_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    memcpy_rgb1_buff_rgb_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = memcpy_rgb1_buff_rgb_U0_ap_ready) and (ap_const_logic_1 = ap_hs_ready))) then 
                memcpy_rgb1_buff_rgb_U0_ap_ready_count <= std_logic_vector(unsigned(memcpy_rgb1_buff_rgb_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = memcpy_rgb1_buff_rgb_U0_ap_ready) and (ap_const_logic_0 = ap_hs_ready))) then 
                memcpy_rgb1_buff_rgb_U0_ap_ready_count <= std_logic_vector(unsigned(memcpy_rgb1_buff_rgb_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    memcpy_rgb2_buff_rgb_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_hs_ready) and (ap_const_logic_0 = memcpy_rgb2_buff_rgb_U0_ap_ready))) then 
                memcpy_rgb2_buff_rgb_U0_ap_ready_count <= std_logic_vector(unsigned(memcpy_rgb2_buff_rgb_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_0 = ap_hs_ready) and (ap_const_logic_1 = memcpy_rgb2_buff_rgb_U0_ap_ready))) then 
                memcpy_rgb2_buff_rgb_U0_ap_ready_count <= std_logic_vector(unsigned(memcpy_rgb2_buff_rgb_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Loop_Block_Cols_proc_U0_ap_continue <= ap_continue;
    Loop_Block_Cols_proc_U0_ap_start <= (rgb1_buff_t_empty_n and rgb2_buff_t_empty_n);
    ap_channel_done_rgb1_buff <= memcpy_rgb1_buff_rgb_U0_ap_done;
    ap_channel_done_rgb2_buff <= memcpy_rgb2_buff_rgb_U0_ap_done;
    ap_done <= Loop_Block_Cols_proc_U0_ap_done;
    ap_hs_continue <= ap_continue;
    ap_hs_done <= Loop_Block_Cols_proc_U0_ap_done;
    ap_hs_ready <= (ap_sync_memcpy_rgb1_buff_rgb_U0_ap_ready and ap_sync_dataflow_in_loop_Loo_U0_ap_ready and ap_sync_memcpy_rgb2_buff_rgb_U0_ap_ready);
    ap_idle <= (dataflow_in_loop_Loo_U0_ap_idle and memcpy_rgb1_buff_rgb_U0_ap_idle and memcpy_rgb2_buff_rgb_U0_ap_idle and Loop_Block_Cols_proc_U0_ap_idle and (rgb1_buff_t_empty_n xor ap_const_logic_1) and (rgb2_buff_t_empty_n xor ap_const_logic_1));
    ap_ready <= ap_hs_ready;
    ap_sync_dataflow_in_loop_Loo_U0_ap_ready <= (dataflow_in_loop_Loo_U0_ap_ready or ap_sync_reg_dataflow_in_loop_Loo_U0_ap_ready);
    ap_sync_dataflow_in_loop_Loo_U0_ap_start <= (ap_start and (ap_sync_reg_dataflow_in_loop_Loo_U0_ap_ready xor ap_const_logic_1));
    ap_sync_memcpy_rgb1_buff_rgb_U0_ap_ready <= (memcpy_rgb1_buff_rgb_U0_ap_ready or ap_sync_reg_memcpy_rgb1_buff_rgb_U0_ap_ready);
    ap_sync_memcpy_rgb1_buff_rgb_U0_ap_start <= (ap_start and (ap_sync_reg_memcpy_rgb1_buff_rgb_U0_ap_ready xor ap_const_logic_1));
    ap_sync_memcpy_rgb2_buff_rgb_U0_ap_ready <= (memcpy_rgb2_buff_rgb_U0_ap_ready or ap_sync_reg_memcpy_rgb2_buff_rgb_U0_ap_ready);
    ap_sync_memcpy_rgb2_buff_rgb_U0_ap_start <= (ap_start and (ap_sync_reg_memcpy_rgb2_buff_rgb_U0_ap_ready xor ap_const_logic_1));
    dataflow_in_loop_Loo_U0_ap_continue <= ap_const_logic_1;
    dataflow_in_loop_Loo_U0_ap_start <= ap_sync_dataflow_in_loop_Loo_U0_ap_start;
    m_axi_rgb1_in_ARADDR <= memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARADDR;
    m_axi_rgb1_in_ARBURST <= memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARBURST;
    m_axi_rgb1_in_ARCACHE <= memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARCACHE;
    m_axi_rgb1_in_ARID <= memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARID;
    m_axi_rgb1_in_ARLEN <= memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARLEN;
    m_axi_rgb1_in_ARLOCK <= memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARLOCK;
    m_axi_rgb1_in_ARPROT <= memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARPROT;
    m_axi_rgb1_in_ARQOS <= memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARQOS;
    m_axi_rgb1_in_ARREGION <= memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARREGION;
    m_axi_rgb1_in_ARSIZE <= memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARSIZE;
    m_axi_rgb1_in_ARUSER <= memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARUSER;
    m_axi_rgb1_in_ARVALID <= memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_ARVALID;
    m_axi_rgb1_in_AWADDR <= ap_const_lv32_0;
    m_axi_rgb1_in_AWBURST <= ap_const_lv2_0;
    m_axi_rgb1_in_AWCACHE <= ap_const_lv4_0;
    m_axi_rgb1_in_AWID <= ap_const_lv1_0;
    m_axi_rgb1_in_AWLEN <= ap_const_lv32_0;
    m_axi_rgb1_in_AWLOCK <= ap_const_lv2_0;
    m_axi_rgb1_in_AWPROT <= ap_const_lv3_0;
    m_axi_rgb1_in_AWQOS <= ap_const_lv4_0;
    m_axi_rgb1_in_AWREGION <= ap_const_lv4_0;
    m_axi_rgb1_in_AWSIZE <= ap_const_lv3_0;
    m_axi_rgb1_in_AWUSER <= ap_const_lv1_0;
    m_axi_rgb1_in_AWVALID <= ap_const_logic_0;
    m_axi_rgb1_in_BREADY <= ap_const_logic_0;
    m_axi_rgb1_in_RREADY <= memcpy_rgb1_buff_rgb_U0_m_axi_rgb1_in_RREADY;
    m_axi_rgb1_in_WDATA <= ap_const_lv32_0;
    m_axi_rgb1_in_WID <= ap_const_lv1_0;
    m_axi_rgb1_in_WLAST <= ap_const_logic_0;
    m_axi_rgb1_in_WSTRB <= ap_const_lv4_0;
    m_axi_rgb1_in_WUSER <= ap_const_lv1_0;
    m_axi_rgb1_in_WVALID <= ap_const_logic_0;
    m_axi_rgb2_in_ARADDR <= memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARADDR;
    m_axi_rgb2_in_ARBURST <= memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARBURST;
    m_axi_rgb2_in_ARCACHE <= memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARCACHE;
    m_axi_rgb2_in_ARID <= memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARID;
    m_axi_rgb2_in_ARLEN <= memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARLEN;
    m_axi_rgb2_in_ARLOCK <= memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARLOCK;
    m_axi_rgb2_in_ARPROT <= memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARPROT;
    m_axi_rgb2_in_ARQOS <= memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARQOS;
    m_axi_rgb2_in_ARREGION <= memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARREGION;
    m_axi_rgb2_in_ARSIZE <= memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARSIZE;
    m_axi_rgb2_in_ARUSER <= memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARUSER;
    m_axi_rgb2_in_ARVALID <= memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_ARVALID;
    m_axi_rgb2_in_AWADDR <= ap_const_lv32_0;
    m_axi_rgb2_in_AWBURST <= ap_const_lv2_0;
    m_axi_rgb2_in_AWCACHE <= ap_const_lv4_0;
    m_axi_rgb2_in_AWID <= ap_const_lv1_0;
    m_axi_rgb2_in_AWLEN <= ap_const_lv32_0;
    m_axi_rgb2_in_AWLOCK <= ap_const_lv2_0;
    m_axi_rgb2_in_AWPROT <= ap_const_lv3_0;
    m_axi_rgb2_in_AWQOS <= ap_const_lv4_0;
    m_axi_rgb2_in_AWREGION <= ap_const_lv4_0;
    m_axi_rgb2_in_AWSIZE <= ap_const_lv3_0;
    m_axi_rgb2_in_AWUSER <= ap_const_lv1_0;
    m_axi_rgb2_in_AWVALID <= ap_const_logic_0;
    m_axi_rgb2_in_BREADY <= ap_const_logic_0;
    m_axi_rgb2_in_RREADY <= memcpy_rgb2_buff_rgb_U0_m_axi_rgb2_in_RREADY;
    m_axi_rgb2_in_WDATA <= ap_const_lv32_0;
    m_axi_rgb2_in_WID <= ap_const_lv1_0;
    m_axi_rgb2_in_WLAST <= ap_const_logic_0;
    m_axi_rgb2_in_WSTRB <= ap_const_lv4_0;
    m_axi_rgb2_in_WUSER <= ap_const_lv1_0;
    m_axi_rgb2_in_WVALID <= ap_const_logic_0;
    memcpy_rgb1_buff_rgb_U0_ap_continue <= rgb1_buff_i_full_n;
    memcpy_rgb1_buff_rgb_U0_ap_start <= ap_sync_memcpy_rgb1_buff_rgb_U0_ap_start;
    memcpy_rgb1_buff_rgb_U0_rgb1_buff_full_n <= rgb1_buff_i_full_n;
    memcpy_rgb2_buff_rgb_U0_ap_continue <= rgb2_buff_i_full_n;
    memcpy_rgb2_buff_rgb_U0_ap_start <= ap_sync_memcpy_rgb2_buff_rgb_U0_ap_start;
    memcpy_rgb2_buff_rgb_U0_rgb2_buff_full_n <= rgb2_buff_i_full_n;
    n_Mat_buff_address0 <= Loop_Block_Cols_proc_U0_n_Mat_buff_address0;
    n_Mat_buff_address1 <= ap_const_lv12_0;
    n_Mat_buff_ce0 <= Loop_Block_Cols_proc_U0_n_Mat_buff_ce0;
    n_Mat_buff_ce1 <= ap_const_logic_0;
    n_Mat_buff_d0 <= Loop_Block_Cols_proc_U0_n_Mat_buff_d0;
    n_Mat_buff_d1 <= ap_const_lv18_0;
    n_Mat_buff_we0 <= Loop_Block_Cols_proc_U0_n_Mat_buff_we0;
    n_Mat_buff_we1 <= ap_const_logic_0;
end behav;
