-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity memcpy_rgb2_buff_rgb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_rgb2_in_AWVALID : OUT STD_LOGIC;
    m_axi_rgb2_in_AWREADY : IN STD_LOGIC;
    m_axi_rgb2_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb2_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb2_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rgb2_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb2_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb2_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb2_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rgb2_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb2_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb2_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_WVALID : OUT STD_LOGIC;
    m_axi_rgb2_in_WREADY : IN STD_LOGIC;
    m_axi_rgb2_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb2_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb2_in_WLAST : OUT STD_LOGIC;
    m_axi_rgb2_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_ARVALID : OUT STD_LOGIC;
    m_axi_rgb2_in_ARREADY : IN STD_LOGIC;
    m_axi_rgb2_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb2_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb2_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rgb2_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb2_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb2_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb2_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_rgb2_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb2_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_rgb2_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_RVALID : IN STD_LOGIC;
    m_axi_rgb2_in_RREADY : OUT STD_LOGIC;
    m_axi_rgb2_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_rgb2_in_RLAST : IN STD_LOGIC;
    m_axi_rgb2_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb2_in_BVALID : IN STD_LOGIC;
    m_axi_rgb2_in_BREADY : OUT STD_LOGIC;
    m_axi_rgb2_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_rgb2_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_rgb2_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    rgb2_in3_dout : IN STD_LOGIC_VECTOR (29 downto 0);
    rgb2_in3_empty_n : IN STD_LOGIC;
    rgb2_in3_read : OUT STD_LOGIC;
    row_0_i_i_channel1_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    row_0_i_i_channel1_empty_n : IN STD_LOGIC;
    row_0_i_i_channel1_read : OUT STD_LOGIC;
    rgb2_buff_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    rgb2_buff_ce0 : OUT STD_LOGIC;
    rgb2_buff_we0 : OUT STD_LOGIC;
    rgb2_buff_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of memcpy_rgb2_buff_rgb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_12C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001011000000";
    constant ap_const_lv13_12C0 : STD_LOGIC_VECTOR (12 downto 0) := "1001011000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv20_12C0 : STD_LOGIC_VECTOR (19 downto 0) := "00000001001011000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rgb2_in_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal rgb2_in_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond2_i_i_i_i_i_reg_200 : STD_LOGIC_VECTOR (0 downto 0);
    signal rgb2_in3_blk_n : STD_LOGIC;
    signal row_0_i_i_channel1_blk_n : STD_LOGIC;
    signal indvar2_i_i_i_i_i_reg_126 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_pipeline_reg_pp0_iter1_indvar2_i_i_i_i_i_reg_126 : STD_LOGIC_VECTOR (12 downto 0);
    signal rgb2_in3_read_reg_179 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_condition_147 : BOOLEAN;
    signal row_0_i_i_channel1_r_reg_184 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_171_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sum_i_i_reg_189 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sig_ioackin_m_axi_rgb2_in_ARREADY : STD_LOGIC;
    signal exitcond2_i_i_i_i_i_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_exitcond2_i_i_i_i_i_reg_200 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_next2_i_i_i_i_fu_160_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_next2_i_i_i_i_reg_204 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal rgb2_in_addr_read_reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal indvar2_i_i_i_i_i_phi_fu_130_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar2_i_cast16_i_i_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_cast_i_i_fu_144_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_rgb2_in_ARREADY : STD_LOGIC := '0';
    signal grp_fu_171_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_171_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_171_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_171_p00 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_171_p20 : STD_LOGIC_VECTOR (30 downto 0);

    component square_check_mac_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (29 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;



begin
    square_check_mac_bkb_x_U13 : component square_check_mac_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 14,
        din2_WIDTH => 30,
        dout_WIDTH => 31)
    port map (
        din0 => grp_fu_171_p0,
        din1 => grp_fu_171_p1,
        din2 => grp_fu_171_p2,
        dout => grp_fu_171_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and (m_axi_rgb2_in_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond2_i_i_i_i_i_fu_154_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and (m_axi_rgb2_in_RVALID = ap_const_logic_0))) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_fu_154_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and (m_axi_rgb2_in_RVALID = ap_const_logic_0))) and not((ap_const_lv1_0 = exitcond2_i_i_i_i_i_fu_154_p2))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and (m_axi_rgb2_in_RVALID = ap_const_logic_0)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_rgb2_in_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_rgb2_in_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state3)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_rgb2_in_ARREADY))) then 
                        ap_reg_ioackin_m_axi_rgb2_in_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_rgb2_in_ARREADY)) then 
                        ap_reg_ioackin_m_axi_rgb2_in_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    indvar2_i_i_i_i_i_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and (m_axi_rgb2_in_RVALID = ap_const_logic_0))))) then 
                indvar2_i_i_i_i_i_reg_126 <= indvar_next2_i_i_i_i_reg_204;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                indvar2_i_i_i_i_i_reg_126 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and (m_axi_rgb2_in_RVALID = ap_const_logic_0))))) then
                ap_pipeline_reg_pp0_iter1_exitcond2_i_i_i_i_i_reg_200 <= exitcond2_i_i_i_i_i_reg_200;
                ap_pipeline_reg_pp0_iter1_indvar2_i_i_i_i_i_reg_126 <= indvar2_i_i_i_i_i_reg_126;
                exitcond2_i_i_i_i_i_reg_200 <= exitcond2_i_i_i_i_i_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and (m_axi_rgb2_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_next2_i_i_i_i_reg_204 <= indvar_next2_i_i_i_i_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_147 = ap_const_boolean_1)))) then
                rgb2_in3_read_reg_179 <= rgb2_in3_dout;
                row_0_i_i_channel1_r_reg_184 <= row_0_i_i_channel1_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and (m_axi_rgb2_in_RVALID = ap_const_logic_0))))) then
                rgb2_in_addr_read_reg_209 <= m_axi_rgb2_in_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                sum_i_i_reg_189 <= grp_fu_171_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, m_axi_rgb2_in_RVALID, ap_enable_reg_pp0_iter1, exitcond2_i_i_i_i_i_reg_200, ap_condition_147, ap_sig_ioackin_m_axi_rgb2_in_ARREADY, exitcond2_i_i_i_i_i_fu_154_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_condition_147 = ap_const_boolean_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_rgb2_in_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and (m_axi_rgb2_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and (m_axi_rgb2_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond2_i_i_i_i_i_fu_154_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and (m_axi_rgb2_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and (m_axi_rgb2_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond2_i_i_i_i_i_fu_154_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_condition_147_assign_proc : process(ap_start, ap_done_reg, rgb2_in3_empty_n, row_0_i_i_channel1_empty_n)
    begin
                ap_condition_147 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (rgb2_in3_empty_n = ap_const_logic_0) or (row_0_i_i_channel1_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_lv1_1 = ap_CS_fsm_state13)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_rgb2_in_ARREADY_assign_proc : process(m_axi_rgb2_in_ARREADY, ap_reg_ioackin_m_axi_rgb2_in_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_rgb2_in_ARREADY)) then 
            ap_sig_ioackin_m_axi_rgb2_in_ARREADY <= m_axi_rgb2_in_ARREADY;
        else 
            ap_sig_ioackin_m_axi_rgb2_in_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond2_i_i_i_i_i_fu_154_p2 <= "1" when (indvar2_i_i_i_i_i_phi_fu_130_p4 = ap_const_lv13_12C0) else "0";
    grp_fu_171_p0 <= grp_fu_171_p00(6 - 1 downto 0);
    grp_fu_171_p00 <= std_logic_vector(resize(unsigned(row_0_i_i_channel1_r_reg_184),20));
    grp_fu_171_p1 <= ap_const_lv20_12C0(14 - 1 downto 0);
    grp_fu_171_p2 <= grp_fu_171_p20(30 - 1 downto 0);
    grp_fu_171_p20 <= std_logic_vector(resize(unsigned(rgb2_in3_read_reg_179),31));
    indvar2_i_cast16_i_i_fu_166_p1 <= std_logic_vector(resize(unsigned(ap_pipeline_reg_pp0_iter1_indvar2_i_i_i_i_i_reg_126),32));

    indvar2_i_i_i_i_i_phi_fu_130_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond2_i_i_i_i_i_reg_200, indvar2_i_i_i_i_i_reg_126, indvar_next2_i_i_i_i_reg_204)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200))) then 
            indvar2_i_i_i_i_i_phi_fu_130_p4 <= indvar_next2_i_i_i_i_reg_204;
        else 
            indvar2_i_i_i_i_i_phi_fu_130_p4 <= indvar2_i_i_i_i_i_reg_126;
        end if; 
    end process;

    indvar_next2_i_i_i_i_fu_160_p2 <= std_logic_vector(unsigned(indvar2_i_i_i_i_i_phi_fu_130_p4) + unsigned(ap_const_lv13_1));
    m_axi_rgb2_in_ARADDR <= sum_cast_i_i_fu_144_p1;
    m_axi_rgb2_in_ARBURST <= ap_const_lv2_0;
    m_axi_rgb2_in_ARCACHE <= ap_const_lv4_0;
    m_axi_rgb2_in_ARID <= ap_const_lv1_0;
    m_axi_rgb2_in_ARLEN <= ap_const_lv32_12C0;
    m_axi_rgb2_in_ARLOCK <= ap_const_lv2_0;
    m_axi_rgb2_in_ARPROT <= ap_const_lv3_0;
    m_axi_rgb2_in_ARQOS <= ap_const_lv4_0;
    m_axi_rgb2_in_ARREGION <= ap_const_lv4_0;
    m_axi_rgb2_in_ARSIZE <= ap_const_lv3_0;
    m_axi_rgb2_in_ARUSER <= ap_const_lv1_0;

    m_axi_rgb2_in_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_reg_ioackin_m_axi_rgb2_in_ARREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_rgb2_in_ARREADY))) then 
            m_axi_rgb2_in_ARVALID <= ap_const_logic_1;
        else 
            m_axi_rgb2_in_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_rgb2_in_AWADDR <= ap_const_lv32_0;
    m_axi_rgb2_in_AWBURST <= ap_const_lv2_0;
    m_axi_rgb2_in_AWCACHE <= ap_const_lv4_0;
    m_axi_rgb2_in_AWID <= ap_const_lv1_0;
    m_axi_rgb2_in_AWLEN <= ap_const_lv32_0;
    m_axi_rgb2_in_AWLOCK <= ap_const_lv2_0;
    m_axi_rgb2_in_AWPROT <= ap_const_lv3_0;
    m_axi_rgb2_in_AWQOS <= ap_const_lv4_0;
    m_axi_rgb2_in_AWREGION <= ap_const_lv4_0;
    m_axi_rgb2_in_AWSIZE <= ap_const_lv3_0;
    m_axi_rgb2_in_AWUSER <= ap_const_lv1_0;
    m_axi_rgb2_in_AWVALID <= ap_const_logic_0;
    m_axi_rgb2_in_BREADY <= ap_const_logic_0;

    m_axi_rgb2_in_RREADY_assign_proc : process(m_axi_rgb2_in_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond2_i_i_i_i_i_reg_200)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and (m_axi_rgb2_in_RVALID = ap_const_logic_0))))) then 
            m_axi_rgb2_in_RREADY <= ap_const_logic_1;
        else 
            m_axi_rgb2_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_rgb2_in_WDATA <= ap_const_lv32_0;
    m_axi_rgb2_in_WID <= ap_const_lv1_0;
    m_axi_rgb2_in_WLAST <= ap_const_logic_0;
    m_axi_rgb2_in_WSTRB <= ap_const_lv4_0;
    m_axi_rgb2_in_WUSER <= ap_const_lv1_0;
    m_axi_rgb2_in_WVALID <= ap_const_logic_0;
    rgb2_buff_address0 <= indvar2_i_cast16_i_i_fu_166_p1(13 - 1 downto 0);

    rgb2_buff_ce0_assign_proc : process(m_axi_rgb2_in_RVALID, ap_enable_reg_pp0_iter1, exitcond2_i_i_i_i_i_reg_200, ap_enable_reg_pp0_iter2)
    begin
        if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and (m_axi_rgb2_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            rgb2_buff_ce0 <= ap_const_logic_1;
        else 
            rgb2_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rgb2_buff_d0 <= rgb2_in_addr_read_reg_209;

    rgb2_buff_we0_assign_proc : process(m_axi_rgb2_in_RVALID, ap_enable_reg_pp0_iter1, exitcond2_i_i_i_i_i_reg_200, ap_pipeline_reg_pp0_iter1_exitcond2_i_i_i_i_i_reg_200, ap_enable_reg_pp0_iter2)
    begin
        if (((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200) and (m_axi_rgb2_in_RVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond2_i_i_i_i_i_reg_200)))) then 
            rgb2_buff_we0 <= ap_const_logic_1;
        else 
            rgb2_buff_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rgb2_in3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rgb2_in3_empty_n)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            rgb2_in3_blk_n <= rgb2_in3_empty_n;
        else 
            rgb2_in3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rgb2_in3_read_assign_proc : process(ap_CS_fsm_state1, ap_condition_147)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_147 = ap_const_boolean_1)))) then 
            rgb2_in3_read <= ap_const_logic_1;
        else 
            rgb2_in3_read <= ap_const_logic_0;
        end if; 
    end process;


    rgb2_in_blk_n_AR_assign_proc : process(m_axi_rgb2_in_ARREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            rgb2_in_blk_n_AR <= m_axi_rgb2_in_ARREADY;
        else 
            rgb2_in_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    rgb2_in_blk_n_R_assign_proc : process(m_axi_rgb2_in_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond2_i_i_i_i_i_reg_200)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond2_i_i_i_i_i_reg_200))) then 
            rgb2_in_blk_n_R <= m_axi_rgb2_in_RVALID;
        else 
            rgb2_in_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    row_0_i_i_channel1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, row_0_i_i_channel1_empty_n)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            row_0_i_i_channel1_blk_n <= row_0_i_i_channel1_empty_n;
        else 
            row_0_i_i_channel1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    row_0_i_i_channel1_read_assign_proc : process(ap_CS_fsm_state1, ap_condition_147)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_147 = ap_const_boolean_1)))) then 
            row_0_i_i_channel1_read <= ap_const_logic_1;
        else 
            row_0_i_i_channel1_read <= ap_const_logic_0;
        end if; 
    end process;

    sum_cast_i_i_fu_144_p1 <= std_logic_vector(resize(unsigned(sum_i_i_reg_189),32));
end behav;
