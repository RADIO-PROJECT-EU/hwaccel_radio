-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_Block_Cols_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    row_0_i_i_dout : IN STD_LOGIC_VECTOR (5 downto 0);
    row_0_i_i_empty_n : IN STD_LOGIC;
    row_0_i_i_read : OUT STD_LOGIC;
    n_Mat_buff_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    n_Mat_buff_ce0 : OUT STD_LOGIC;
    n_Mat_buff_we0 : OUT STD_LOGIC;
    n_Mat_buff_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    rgb1_buff1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    rgb1_buff1_ce0 : OUT STD_LOGIC;
    rgb1_buff1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    rgb2_buff2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    rgb2_buff2_ce0 : OUT STD_LOGIC;
    rgb2_buff2_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of Loop_Block_Cols_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_28 : STD_LOGIC_VECTOR (8 downto 0) := "000101000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv38_51EB9 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001010001111010111001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal row_0_i_i_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_171 : STD_LOGIC_VECTOR (6 downto 0);
    signal x_0_i_i_i_i_reg_182 : STD_LOGIC_VECTOR (3 downto 0);
    signal n_1_i_i_i_i_reg_193 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_0_i_i_i_i_reg_205 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_i_fu_240_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i_i_reg_686 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_condition_71 : BOOLEAN;
    signal exitcond2_i_i_i_i_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal col_fu_252_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_reg_695 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_0_i_i_cast19_i_i_fu_258_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal col_0_i_i_cast19_i_i_reg_700 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_2_i_cast_i_i_cas_fu_288_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_i_cast_i_i_cas_reg_705 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_i_i_i_fu_316_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_i_i_i_reg_710 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal exitcond_flatten_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_715 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_715 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_715 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_715 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_328_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal exitcond_i_i_i_i_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_i_i_i_reg_724 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_i_i_mid1_fu_378_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_i_i_i_mid1_reg_729 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_0_i_i_i_i_mid2_fu_384_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_396_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_reg_739 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_fu_401_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_19_i_i_i_fu_443_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_i_i_i_reg_759 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_i_i_i_fu_491_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_i_i_i_reg_766 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_i_i_i_fu_511_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_i_i_i_reg_773 : STD_LOGIC_VECTOR (8 downto 0);
    signal dif_fu_527_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal dif_reg_780 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_i_i_i_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_i_i_i_reg_785 : STD_LOGIC_VECTOR (0 downto 0);
    signal dif_2_fu_550_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal dif_2_reg_790 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_i_i_i_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_i_i_i_reg_795 : STD_LOGIC_VECTOR (0 downto 0);
    signal dif_4_fu_573_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal dif_4_reg_800 : STD_LOGIC_VECTOR (8 downto 0);
    signal n_fu_648_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal mul_fu_680_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_reg_811 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_4_i_i_i_fu_658_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_i_i_i_reg_816 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal col_0_i_i_i_i_reg_160 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_9_i_cast_i_i_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_cast_i_i_fu_676_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl_i_fu_216_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl2_i_fu_228_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_i_fu_224_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl2_cast_i_fu_236_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl4_i_i_fu_270_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_cast_i_i_fu_278_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl3_i_i_fu_262_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_i_i_i_fu_282_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_i_i_fu_292_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_i_i_fu_304_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_i_i_fu_300_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_cast_i_i_fu_312_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal x_fu_348_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl5_i_i_mid1_fu_354_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_shl6_i_i_mid1_fu_366_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_i_i_mid1_fu_362_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl6_cast_i_i_mid1_fu_374_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal y_0_i_i_i_i_mid2_fu_340_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_0_i_i_cast10_i_i_c_fu_392_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_i_i_i_mid2_fu_407_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_cast_fu_412_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_9_i_i_i_fu_415_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal b_fu_427_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal b2_fu_435_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_i_cast_i_i_fu_431_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_i_cast_i_i_fu_439_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_fu_449_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal g_fu_463_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal r2_fu_477_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_i_cast_i_i_fu_459_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_i_cast_i_i_fu_487_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal g2_fu_497_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_i_cast_i_i_fu_473_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_i_cast_i_i_fu_507_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal abscond_i_i_i_i_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_i_i_i_i_fu_517_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal abscond5_i_i_i_i_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg4_i_i_i_i_fu_540_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal abscond8_i_i_i_i_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg7_i_i_i_i_fu_563_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_580_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal dif_1_fu_583_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_594_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal dif_3_fu_597_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_i_i_i_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_608_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal dif_5_fu_616_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal dif_1_cast_i_i_cast_fu_590_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal dif_3_cast_i_i_cast_fu_604_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_628_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal dif_5_cast_i_i_cast_fu_624_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_cast_fu_634_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_638_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast_cast_fu_644_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_662_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_fu_680_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_fu_680_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_fu_680_p00 : STD_LOGIC_VECTOR (37 downto 0);

    component square_check_mul_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;



begin
    square_check_mul_cud_U18 : component square_check_mul_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 20,
        dout_WIDTH => 38)
    port map (
        din0 => mul_fu_680_p0,
        din1 => mul_fu_680_p1,
        dout => mul_fu_680_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond2_i_i_i_i_fu_246_p2 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = exitcond_flatten_fu_322_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond2_i_i_i_i_fu_246_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_322_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond2_i_i_i_i_fu_246_p2 = ap_const_lv1_0)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((ap_const_lv1_0 = exitcond_flatten_fu_322_p2))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
            end if;
        end if;
    end process;


    col_0_i_i_i_i_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                col_0_i_i_i_i_reg_160 <= col_reg_695;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_71 = ap_const_boolean_1)))) then 
                col_0_i_i_i_i_reg_160 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_322_p2))) then 
                indvar_flatten_reg_171 <= indvar_flatten_next_fu_328_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond2_i_i_i_i_fu_246_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_171 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    n_1_i_i_i_i_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_715))) then 
                n_1_i_i_i_i_reg_193 <= n_fu_648_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond2_i_i_i_i_fu_246_p2 = ap_const_lv1_0))) then 
                n_1_i_i_i_i_reg_193 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    x_0_i_i_i_i_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_322_p2))) then 
                x_0_i_i_i_i_reg_182 <= x_0_i_i_i_i_mid2_fu_384_p3;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond2_i_i_i_i_fu_246_p2 = ap_const_lv1_0))) then 
                x_0_i_i_i_i_reg_182 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    y_0_i_i_i_i_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_322_p2))) then 
                y_0_i_i_i_i_reg_205 <= y_fu_401_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond2_i_i_i_i_fu_246_p2 = ap_const_lv1_0))) then 
                y_0_i_i_i_i_reg_205 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0))) then
                ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_715 <= exitcond_flatten_reg_715;
                exitcond_flatten_reg_715 <= exitcond_flatten_fu_322_p2;
                    tmp_6_i_i_i_reg_710(13 downto 5) <= tmp_6_i_i_i_fu_316_p2(13 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_const_boolean_1)) then
                ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_715 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_715;
                ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_715 <= ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_715;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (exitcond2_i_i_i_i_fu_246_p2 = ap_const_lv1_0))) then
                    col_0_i_i_cast19_i_i_reg_700(5 downto 0) <= col_0_i_i_cast19_i_i_fu_258_p1(5 downto 0);
                    tmp_2_i_cast_i_i_cas_reg_705(8 downto 1) <= tmp_2_i_cast_i_i_cas_fu_288_p1(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                col_reg_695 <= col_fu_252_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_715)) then
                dif_2_reg_790 <= dif_2_fu_550_p3;
                dif_4_reg_800 <= dif_4_fu_573_p3;
                dif_reg_780 <= dif_fu_527_p3;
                tmp_12_i_i_i_reg_785 <= tmp_12_i_i_i_fu_534_p2;
                tmp_16_i_i_i_reg_795 <= tmp_16_i_i_i_fu_557_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_0 = exitcond_flatten_fu_322_p2))) then
                exitcond_i_i_i_i_reg_724 <= exitcond_i_i_i_i_fu_334_p2;
                    tmp_6_i_i_i_mid1_reg_729(13 downto 5) <= tmp_6_i_i_i_mid1_fu_378_p2(13 downto 5);
                tmp_reg_739 <= tmp_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state8))) then
                mul_reg_811 <= mul_fu_680_p2;
                tmp_4_i_i_i_reg_816 <= tmp_4_i_i_i_fu_658_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_715)) then
                tmp_11_i_i_i_reg_766 <= tmp_11_i_i_i_fu_491_p2;
                tmp_15_i_i_i_reg_773 <= tmp_15_i_i_i_fu_511_p2;
                tmp_19_i_i_i_reg_759 <= tmp_19_i_i_i_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_71 = ap_const_boolean_1)))) then
                    tmp_i_i_reg_686(12 downto 4) <= tmp_i_i_fu_240_p2(12 downto 4);
            end if;
        end if;
    end process;
    tmp_i_i_reg_686(3 downto 0) <= "0000";
    col_0_i_i_cast19_i_i_reg_700(12 downto 6) <= "0000000";
    tmp_2_i_cast_i_i_cas_reg_705(0) <= '0';
    tmp_2_i_cast_i_i_cas_reg_705(9) <= '0';
    tmp_6_i_i_i_reg_710(4 downto 0) <= "00000";
    tmp_6_i_i_i_mid1_reg_729(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_condition_71, exitcond2_i_i_i_i_fu_246_p2, exitcond_flatten_fu_322_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_condition_71 = ap_const_boolean_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not((exitcond2_i_i_i_i_fu_246_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter4) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter3)))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_322_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_322_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    abscond5_i_i_i_i_fu_545_p2 <= "1" when (signed(tmp_15_i_i_i_reg_773) > signed(ap_const_lv9_0)) else "0";
    abscond8_i_i_i_i_fu_568_p2 <= "1" when (signed(tmp_19_i_i_i_reg_759) > signed(ap_const_lv9_0)) else "0";
    abscond_i_i_i_i_fu_522_p2 <= "1" when (signed(tmp_11_i_i_i_reg_766) > signed(ap_const_lv9_0)) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state8 <= ap_CS_fsm(3 downto 3);
    ap_CS_fsm_state9 <= ap_CS_fsm(4 downto 4);

    ap_condition_71_assign_proc : process(ap_start, ap_done_reg, row_0_i_i_empty_n)
    begin
                ap_condition_71 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (row_0_i_i_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, exitcond2_i_i_i_i_fu_246_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond2_i_i_i_i_fu_246_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond2_i_i_i_i_fu_246_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((exitcond2_i_i_i_i_fu_246_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b2_fu_435_p1 <= rgb2_buff2_q0(8 - 1 downto 0);
    b_fu_427_p1 <= rgb1_buff1_q0(8 - 1 downto 0);
    col_0_i_i_cast19_i_i_fu_258_p1 <= std_logic_vector(resize(unsigned(col_0_i_i_i_i_reg_160),13));
    col_fu_252_p2 <= std_logic_vector(unsigned(col_0_i_i_i_i_reg_160) + unsigned(ap_const_lv6_1));
    dif_1_cast_i_i_cast_fu_590_p1 <= std_logic_vector(resize(unsigned(dif_1_fu_583_p3),9));
    dif_1_fu_583_p3 <= 
        tmp_6_fu_580_p1 when (tmp_12_i_i_i_reg_785(0) = '1') else 
        ap_const_lv8_0;
    dif_2_fu_550_p3 <= 
        tmp_15_i_i_i_reg_773 when (abscond5_i_i_i_i_fu_545_p2(0) = '1') else 
        neg4_i_i_i_i_fu_540_p2;
    dif_3_cast_i_i_cast_fu_604_p1 <= std_logic_vector(resize(unsigned(dif_3_fu_597_p3),9));
    dif_3_fu_597_p3 <= 
        tmp_7_fu_594_p1 when (tmp_16_i_i_i_reg_795(0) = '1') else 
        ap_const_lv8_0;
    dif_4_fu_573_p3 <= 
        tmp_19_i_i_i_reg_759 when (abscond8_i_i_i_i_fu_568_p2(0) = '1') else 
        neg7_i_i_i_i_fu_563_p2;
    dif_5_cast_i_i_cast_fu_624_p1 <= std_logic_vector(resize(unsigned(dif_5_fu_616_p3),10));
    dif_5_fu_616_p3 <= 
        tmp_8_fu_608_p1 when (tmp_20_i_i_i_fu_611_p2(0) = '1') else 
        ap_const_lv8_0;
    dif_fu_527_p3 <= 
        tmp_11_i_i_i_reg_766 when (abscond_i_i_i_i_fu_522_p2(0) = '1') else 
        neg_i_i_i_i_fu_517_p2;
    exitcond2_i_i_i_i_fu_246_p2 <= "1" when (col_0_i_i_i_i_reg_160 = ap_const_lv6_30) else "0";
    exitcond_flatten_fu_322_p2 <= "1" when (indvar_flatten_reg_171 = ap_const_lv7_64) else "0";
    exitcond_i_i_i_i_fu_334_p2 <= "1" when (y_0_i_i_i_i_reg_205 = ap_const_lv4_A) else "0";
    g2_fu_497_p4 <= rgb2_buff2_q0(15 downto 8);
    g_fu_463_p4 <= rgb1_buff1_q0(15 downto 8);
    indvar_flatten_next_fu_328_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_171) + unsigned(ap_const_lv7_1));
    mul_fu_680_p0 <= mul_fu_680_p00(17 - 1 downto 0);
    mul_fu_680_p00 <= std_logic_vector(resize(unsigned(n_1_i_i_i_i_reg_193),38));
    mul_fu_680_p1 <= ap_const_lv38_51EB9(20 - 1 downto 0);
    n_Mat_buff_address0 <= tmp_4_i_cast_i_i_fu_676_p1(12 - 1 downto 0);

    n_Mat_buff_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
            n_Mat_buff_ce0 <= ap_const_logic_1;
        else 
            n_Mat_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        n_Mat_buff_d0 <= std_logic_vector(resize(signed(tmp_2_fu_662_p4),18));


    n_Mat_buff_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state9)))) then 
            n_Mat_buff_we0 <= ap_const_logic_1;
        else 
            n_Mat_buff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    n_fu_648_p2 <= std_logic_vector(unsigned(p_cast_cast_fu_644_p1) + unsigned(n_1_i_i_i_i_reg_193));
    neg4_i_i_i_i_fu_540_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_15_i_i_i_reg_773));
    neg7_i_i_i_i_fu_563_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_19_i_i_i_reg_759));
    neg_i_i_i_i_fu_517_p2 <= std_logic_vector(unsigned(ap_const_lv9_0) - unsigned(tmp_11_i_i_i_reg_766));
    p_cast_cast_fu_644_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_638_p2),17));
    p_shl2_cast_i_fu_236_p1 <= std_logic_vector(resize(unsigned(p_shl2_i_fu_228_p3),13));
    p_shl2_i_fu_228_p3 <= (row_0_i_i_dout & ap_const_lv4_0);
    p_shl3_i_i_fu_262_p3 <= (col_0_i_i_i_i_reg_160 & ap_const_lv3_0);
    p_shl4_cast_i_i_fu_278_p1 <= std_logic_vector(resize(unsigned(p_shl4_i_i_fu_270_p3),9));
    p_shl4_i_i_fu_270_p3 <= (col_0_i_i_i_i_reg_160 & ap_const_lv1_0);
    p_shl5_cast_i_i_fu_300_p1 <= std_logic_vector(resize(unsigned(p_shl5_i_i_fu_292_p3),14));
    p_shl5_cast_i_i_mid1_fu_362_p1 <= std_logic_vector(resize(unsigned(p_shl5_i_i_mid1_fu_354_p3),14));
    p_shl5_i_i_fu_292_p3 <= (x_0_i_i_i_i_reg_182 & ap_const_lv9_0);
    p_shl5_i_i_mid1_fu_354_p3 <= (x_fu_348_p2 & ap_const_lv9_0);
    p_shl6_cast_i_i_fu_312_p1 <= std_logic_vector(resize(unsigned(p_shl6_i_i_fu_304_p3),14));
    p_shl6_cast_i_i_mid1_fu_374_p1 <= std_logic_vector(resize(unsigned(p_shl6_i_i_mid1_fu_366_p3),14));
    p_shl6_i_i_fu_304_p3 <= (x_0_i_i_i_i_reg_182 & ap_const_lv5_0);
    p_shl6_i_i_mid1_fu_366_p3 <= (x_fu_348_p2 & ap_const_lv5_0);
    p_shl_cast_i_fu_224_p1 <= std_logic_vector(resize(unsigned(p_shl_i_fu_216_p3),13));
    p_shl_i_fu_216_p3 <= (row_0_i_i_dout & ap_const_lv6_0);
    r2_fu_477_p4 <= rgb2_buff2_q0(23 downto 16);
    r_fu_449_p4 <= rgb1_buff1_q0(23 downto 16);
    rgb1_buff1_address0 <= tmp_9_i_cast_i_i_fu_421_p1(13 - 1 downto 0);

    rgb1_buff1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            rgb1_buff1_ce0 <= ap_const_logic_1;
        else 
            rgb1_buff1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rgb2_buff2_address0 <= tmp_9_i_cast_i_i_fu_421_p1(13 - 1 downto 0);

    rgb2_buff2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            rgb2_buff2_ce0 <= ap_const_logic_1;
        else 
            rgb2_buff2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_0_i_i_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, row_0_i_i_empty_n)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            row_0_i_i_blk_n <= row_0_i_i_empty_n;
        else 
            row_0_i_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    row_0_i_i_read_assign_proc : process(ap_CS_fsm_state1, ap_condition_71)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_71 = ap_const_boolean_1)))) then 
            row_0_i_i_read <= ap_const_logic_1;
        else 
            row_0_i_i_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_fu_634_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_628_p2),10));
    tmp1_fu_628_p2 <= std_logic_vector(unsigned(dif_1_cast_i_i_cast_fu_590_p1) + unsigned(dif_3_cast_i_i_cast_fu_604_p1));
    tmp_10_i_cast_i_i_fu_487_p1 <= std_logic_vector(resize(unsigned(r2_fu_477_p4),9));
    tmp_11_i_i_i_fu_491_p2 <= std_logic_vector(unsigned(tmp_7_i_cast_i_i_fu_459_p1) - unsigned(tmp_10_i_cast_i_i_fu_487_p1));
    tmp_12_i_i_i_fu_534_p2 <= "1" when (signed(dif_fu_527_p3) > signed(ap_const_lv9_28)) else "0";
    tmp_13_i_cast_i_i_fu_473_p1 <= std_logic_vector(resize(unsigned(g_fu_463_p4),9));
    tmp_14_i_cast_i_i_fu_507_p1 <= std_logic_vector(resize(unsigned(g2_fu_497_p4),9));
    tmp_15_i_i_i_fu_511_p2 <= std_logic_vector(unsigned(tmp_13_i_cast_i_i_fu_473_p1) - unsigned(tmp_14_i_cast_i_i_fu_507_p1));
    tmp_16_i_i_i_fu_557_p2 <= "1" when (signed(dif_2_fu_550_p3) > signed(ap_const_lv9_28)) else "0";
    tmp_17_i_cast_i_i_fu_431_p1 <= std_logic_vector(resize(unsigned(b_fu_427_p1),9));
    tmp_18_i_cast_i_i_fu_439_p1 <= std_logic_vector(resize(unsigned(b2_fu_435_p1),9));
    tmp_19_i_i_i_fu_443_p2 <= std_logic_vector(unsigned(tmp_17_i_cast_i_i_fu_431_p1) - unsigned(tmp_18_i_cast_i_i_fu_439_p1));
    tmp_1_fu_638_p2 <= std_logic_vector(unsigned(dif_5_cast_i_i_cast_fu_624_p1) + unsigned(tmp1_cast_fu_634_p1));
    tmp_20_i_i_i_fu_611_p2 <= "1" when (signed(dif_4_reg_800) > signed(ap_const_lv9_28)) else "0";
    tmp_2_fu_662_p4 <= mul_reg_811(37 downto 25);
    tmp_2_i_cast_i_i_cas_fu_288_p1 <= std_logic_vector(resize(unsigned(tmp_2_i_i_i_fu_282_p2),10));
    tmp_2_i_i_i_fu_282_p2 <= std_logic_vector(unsigned(p_shl4_cast_i_i_fu_278_p1) + unsigned(p_shl3_i_i_fu_262_p3));
        tmp_4_i_cast_i_i_fu_676_p1 <= std_logic_vector(resize(signed(tmp_4_i_i_i_reg_816),32));

    tmp_4_i_i_i_fu_658_p2 <= std_logic_vector(unsigned(col_0_i_i_cast19_i_i_reg_700) + unsigned(tmp_i_i_reg_686));
    tmp_6_fu_580_p1 <= dif_reg_780(8 - 1 downto 0);
    tmp_6_i_i_i_fu_316_p2 <= std_logic_vector(unsigned(p_shl5_cast_i_i_fu_300_p1) - unsigned(p_shl6_cast_i_i_fu_312_p1));
    tmp_6_i_i_i_mid1_fu_378_p2 <= std_logic_vector(unsigned(p_shl5_cast_i_i_mid1_fu_362_p1) - unsigned(p_shl6_cast_i_i_mid1_fu_374_p1));
    tmp_6_i_i_i_mid2_fu_407_p3 <= 
        tmp_6_i_i_i_mid1_reg_729 when (exitcond_i_i_i_i_reg_724(0) = '1') else 
        tmp_6_i_i_i_reg_710;
    tmp_7_fu_594_p1 <= dif_2_reg_790(8 - 1 downto 0);
    tmp_7_i_cast_i_i_fu_459_p1 <= std_logic_vector(resize(unsigned(r_fu_449_p4),9));
    tmp_8_fu_608_p1 <= dif_4_reg_800(8 - 1 downto 0);
        tmp_9_i_cast_i_i_fu_421_p1 <= std_logic_vector(resize(signed(tmp_9_i_i_i_fu_415_p2),32));

    tmp_9_i_i_i_fu_415_p2 <= std_logic_vector(unsigned(tmp_6_i_i_i_mid2_fu_407_p3) + unsigned(tmp_cast_fu_412_p1));
    tmp_cast_fu_412_p1 <= std_logic_vector(resize(unsigned(tmp_reg_739),14));
    tmp_fu_396_p2 <= std_logic_vector(unsigned(y_0_i_i_cast10_i_i_c_fu_392_p1) + unsigned(tmp_2_i_cast_i_i_cas_reg_705));
    tmp_i_i_fu_240_p2 <= std_logic_vector(unsigned(p_shl_cast_i_fu_224_p1) - unsigned(p_shl2_cast_i_fu_236_p1));
    x_0_i_i_i_i_mid2_fu_384_p3 <= 
        x_fu_348_p2 when (exitcond_i_i_i_i_fu_334_p2(0) = '1') else 
        x_0_i_i_i_i_reg_182;
    x_fu_348_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(x_0_i_i_i_i_reg_182));
    y_0_i_i_cast10_i_i_c_fu_392_p1 <= std_logic_vector(resize(unsigned(y_0_i_i_i_i_mid2_fu_340_p3),10));
    y_0_i_i_i_i_mid2_fu_340_p3 <= 
        ap_const_lv4_0 when (exitcond_i_i_i_i_fu_334_p2(0) = '1') else 
        y_0_i_i_i_i_reg_205;
    y_fu_401_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(y_0_i_i_i_i_mid2_fu_340_p3));
end behav;
