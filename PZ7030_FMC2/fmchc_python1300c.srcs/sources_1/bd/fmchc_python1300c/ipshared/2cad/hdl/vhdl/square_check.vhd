-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity square_check is
generic (
    C_M_AXI_AXI_LITE_RGB_1_N_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_LITE_RGB_1_N_ID_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_LITE_RGB_1_N_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_LITE_RGB_1_N_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_LITE_RGB_1_N_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_LITE_RGB_1_N_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_LITE_RGB_1_N_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_LITE_RGB_1_N_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_LITE_RGB_2_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_LITE_RGB_2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_LITE_RGB_2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_LITE_RGB_2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_LITE_RGB_2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_LITE_RGB_2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_LITE_RGB_2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_AXI_LITE_RGB_2_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXI_LITE_RGB_1_N_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXI_LITE_RGB_1_N_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_AXI_LITE_RGB_2_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXI_LITE_RGB_2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_AXI_LITE_RGB_2_USER_VALUE : INTEGER := 0;
    C_M_AXI_AXI_LITE_RGB_1_N_PROT_VALUE : INTEGER := 0;
    C_M_AXI_AXI_LITE_RGB_1_N_USER_VALUE : INTEGER := 0;
    C_M_AXI_AXI_LITE_RGB_2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_AXI_LITE_RGB_1_N_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_AXI_LITE_RGB_2_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_AXI_Lite_RGB_1_N_AWVALID : OUT STD_LOGIC;
    m_axi_AXI_Lite_RGB_1_N_AWREADY : IN STD_LOGIC;
    m_axi_AXI_Lite_RGB_1_N_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_1_N_ADDR_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_1_N_ID_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_AXI_Lite_RGB_1_N_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_Lite_RGB_1_N_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_Lite_RGB_1_N_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_Lite_RGB_1_N_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_Lite_RGB_1_N_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_Lite_RGB_1_N_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_1_N_AWUSER_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_WVALID : OUT STD_LOGIC;
    m_axi_AXI_Lite_RGB_1_N_WREADY : IN STD_LOGIC;
    m_axi_AXI_Lite_RGB_1_N_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_1_N_DATA_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_1_N_DATA_WIDTH/8-1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_WLAST : OUT STD_LOGIC;
    m_axi_AXI_Lite_RGB_1_N_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_1_N_ID_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_1_N_WUSER_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_ARVALID : OUT STD_LOGIC;
    m_axi_AXI_Lite_RGB_1_N_ARREADY : IN STD_LOGIC;
    m_axi_AXI_Lite_RGB_1_N_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_1_N_ADDR_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_1_N_ID_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_AXI_Lite_RGB_1_N_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_Lite_RGB_1_N_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_Lite_RGB_1_N_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_Lite_RGB_1_N_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_Lite_RGB_1_N_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_Lite_RGB_1_N_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_1_N_ARUSER_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_RVALID : IN STD_LOGIC;
    m_axi_AXI_Lite_RGB_1_N_RREADY : OUT STD_LOGIC;
    m_axi_AXI_Lite_RGB_1_N_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_1_N_DATA_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_RLAST : IN STD_LOGIC;
    m_axi_AXI_Lite_RGB_1_N_RID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_1_N_ID_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_1_N_RUSER_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_BVALID : IN STD_LOGIC;
    m_axi_AXI_Lite_RGB_1_N_BREADY : OUT STD_LOGIC;
    m_axi_AXI_Lite_RGB_1_N_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_BID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_1_N_ID_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_1_N_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_1_N_BUSER_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_2_AWVALID : OUT STD_LOGIC;
    m_axi_AXI_Lite_RGB_2_AWREADY : IN STD_LOGIC;
    m_axi_AXI_Lite_RGB_2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_2_ADDR_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_2_ID_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_AXI_Lite_RGB_2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_Lite_RGB_2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_Lite_RGB_2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_Lite_RGB_2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_Lite_RGB_2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_Lite_RGB_2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_Lite_RGB_2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_Lite_RGB_2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_2_AWUSER_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_2_WVALID : OUT STD_LOGIC;
    m_axi_AXI_Lite_RGB_2_WREADY : IN STD_LOGIC;
    m_axi_AXI_Lite_RGB_2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_2_DATA_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_2_DATA_WIDTH/8-1 downto 0);
    m_axi_AXI_Lite_RGB_2_WLAST : OUT STD_LOGIC;
    m_axi_AXI_Lite_RGB_2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_2_ID_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_2_WUSER_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_2_ARVALID : OUT STD_LOGIC;
    m_axi_AXI_Lite_RGB_2_ARREADY : IN STD_LOGIC;
    m_axi_AXI_Lite_RGB_2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_2_ADDR_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_2_ID_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_AXI_Lite_RGB_2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_Lite_RGB_2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_Lite_RGB_2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_Lite_RGB_2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_Lite_RGB_2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_AXI_Lite_RGB_2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_Lite_RGB_2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_AXI_Lite_RGB_2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_2_ARUSER_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_2_RVALID : IN STD_LOGIC;
    m_axi_AXI_Lite_RGB_2_RREADY : OUT STD_LOGIC;
    m_axi_AXI_Lite_RGB_2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_2_DATA_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_2_RLAST : IN STD_LOGIC;
    m_axi_AXI_Lite_RGB_2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_2_ID_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_2_RUSER_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_Lite_RGB_2_BVALID : IN STD_LOGIC;
    m_axi_AXI_Lite_RGB_2_BREADY : OUT STD_LOGIC;
    m_axi_AXI_Lite_RGB_2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_AXI_Lite_RGB_2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_2_ID_WIDTH-1 downto 0);
    m_axi_AXI_Lite_RGB_2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_AXI_LITE_RGB_2_BUSER_WIDTH-1 downto 0);
    s_axi_AXI_Lite_RGB_1_N_AWVALID : IN STD_LOGIC;
    s_axi_AXI_Lite_RGB_1_N_AWREADY : OUT STD_LOGIC;
    s_axi_AXI_Lite_RGB_1_N_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_RGB_1_N_ADDR_WIDTH-1 downto 0);
    s_axi_AXI_Lite_RGB_1_N_WVALID : IN STD_LOGIC;
    s_axi_AXI_Lite_RGB_1_N_WREADY : OUT STD_LOGIC;
    s_axi_AXI_Lite_RGB_1_N_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_RGB_1_N_DATA_WIDTH-1 downto 0);
    s_axi_AXI_Lite_RGB_1_N_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_RGB_1_N_DATA_WIDTH/8-1 downto 0);
    s_axi_AXI_Lite_RGB_1_N_ARVALID : IN STD_LOGIC;
    s_axi_AXI_Lite_RGB_1_N_ARREADY : OUT STD_LOGIC;
    s_axi_AXI_Lite_RGB_1_N_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_RGB_1_N_ADDR_WIDTH-1 downto 0);
    s_axi_AXI_Lite_RGB_1_N_RVALID : OUT STD_LOGIC;
    s_axi_AXI_Lite_RGB_1_N_RREADY : IN STD_LOGIC;
    s_axi_AXI_Lite_RGB_1_N_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_RGB_1_N_DATA_WIDTH-1 downto 0);
    s_axi_AXI_Lite_RGB_1_N_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXI_Lite_RGB_1_N_BVALID : OUT STD_LOGIC;
    s_axi_AXI_Lite_RGB_1_N_BREADY : IN STD_LOGIC;
    s_axi_AXI_Lite_RGB_1_N_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_AXI_Lite_RGB_2_AWVALID : IN STD_LOGIC;
    s_axi_AXI_Lite_RGB_2_AWREADY : OUT STD_LOGIC;
    s_axi_AXI_Lite_RGB_2_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_RGB_2_ADDR_WIDTH-1 downto 0);
    s_axi_AXI_Lite_RGB_2_WVALID : IN STD_LOGIC;
    s_axi_AXI_Lite_RGB_2_WREADY : OUT STD_LOGIC;
    s_axi_AXI_Lite_RGB_2_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_RGB_2_DATA_WIDTH-1 downto 0);
    s_axi_AXI_Lite_RGB_2_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_RGB_2_DATA_WIDTH/8-1 downto 0);
    s_axi_AXI_Lite_RGB_2_ARVALID : IN STD_LOGIC;
    s_axi_AXI_Lite_RGB_2_ARREADY : OUT STD_LOGIC;
    s_axi_AXI_Lite_RGB_2_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_RGB_2_ADDR_WIDTH-1 downto 0);
    s_axi_AXI_Lite_RGB_2_RVALID : OUT STD_LOGIC;
    s_axi_AXI_Lite_RGB_2_RREADY : IN STD_LOGIC;
    s_axi_AXI_Lite_RGB_2_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXI_LITE_RGB_2_DATA_WIDTH-1 downto 0);
    s_axi_AXI_Lite_RGB_2_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXI_Lite_RGB_2_BVALID : OUT STD_LOGIC;
    s_axi_AXI_Lite_RGB_2_BREADY : IN STD_LOGIC;
    s_axi_AXI_Lite_RGB_2_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of square_check is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "square_check,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z030sbg485-1,HLS_INPUT_CLOCK=7.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.380000,HLS_SYN_LAT=336726,HLS_SYN_TPT=none,HLS_SYN_MEM=72,HLS_SYN_DSP=3,HLS_SYN_FF=1920,HLS_SYN_LUT=2146}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_C00 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv12_C00 : STD_LOGIC_VECTOR (11 downto 0) := "110000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal rgb1_in : STD_LOGIC_VECTOR (31 downto 0);
    signal rgb2_in : STD_LOGIC_VECTOR (31 downto 0);
    signal n_Mat_out : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_Lite_RGB_1_N_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal AXI_Lite_RGB_1_N_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal exitcond1_reg_240 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_Lite_RGB_1_N_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal AXI_Lite_RGB_1_N_AWVALID : STD_LOGIC;
    signal AXI_Lite_RGB_1_N_AWREADY : STD_LOGIC;
    signal AXI_Lite_RGB_1_N_WVALID : STD_LOGIC;
    signal AXI_Lite_RGB_1_N_WREADY : STD_LOGIC;
    signal AXI_Lite_RGB_1_N_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_Lite_RGB_1_N_ARVALID : STD_LOGIC;
    signal AXI_Lite_RGB_1_N_ARREADY : STD_LOGIC;
    signal AXI_Lite_RGB_1_N_RVALID : STD_LOGIC;
    signal AXI_Lite_RGB_1_N_RREADY : STD_LOGIC;
    signal AXI_Lite_RGB_1_N_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_Lite_RGB_1_N_RLAST : STD_LOGIC;
    signal AXI_Lite_RGB_1_N_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_Lite_RGB_1_N_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_Lite_RGB_1_N_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal AXI_Lite_RGB_1_N_BVALID : STD_LOGIC;
    signal AXI_Lite_RGB_1_N_BREADY : STD_LOGIC;
    signal AXI_Lite_RGB_1_N_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal AXI_Lite_RGB_1_N_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_Lite_RGB_1_N_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_Lite_RGB_2_AWREADY : STD_LOGIC;
    signal AXI_Lite_RGB_2_WREADY : STD_LOGIC;
    signal AXI_Lite_RGB_2_ARVALID : STD_LOGIC;
    signal AXI_Lite_RGB_2_ARREADY : STD_LOGIC;
    signal AXI_Lite_RGB_2_RVALID : STD_LOGIC;
    signal AXI_Lite_RGB_2_RREADY : STD_LOGIC;
    signal AXI_Lite_RGB_2_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal AXI_Lite_RGB_2_RLAST : STD_LOGIC;
    signal AXI_Lite_RGB_2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_Lite_RGB_2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_Lite_RGB_2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal AXI_Lite_RGB_2_BVALID : STD_LOGIC;
    signal AXI_Lite_RGB_2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal AXI_Lite_RGB_2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal AXI_Lite_RGB_2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar1_reg_134 : STD_LOGIC_VECTOR (11 downto 0);
    signal n_Mat_out5_reg_220 : STD_LOGIC_VECTOR (29 downto 0);
    signal rgb2_in3_reg_225 : STD_LOGIC_VECTOR (29 downto 0);
    signal rgb1_in1_reg_230 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_sig_ioackin_AXI_Lite_RGB_1_N_AWREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_ap_done : STD_LOGIC;
    signal exitcond1_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY : STD_LOGIC;
    signal indvar_next1_fu_205_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal n_Mat_buff_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal n_Mat_buff_load_reg_254 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal n_Mat_buff_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal n_Mat_buff_ce0 : STD_LOGIC;
    signal n_Mat_buff_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_WVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_WLAST : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_RREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_BREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_WVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_WLAST : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARVALID : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_RREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_BREADY : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_d0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_d1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_145_ap_continue : STD_LOGIC;
    signal ap_reg_grp_dataflow_parent_loop_1_fu_145_ap_start : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_1_fu_145_ap_ready : STD_LOGIC := '0';
    signal ap_sync_grp_dataflow_parent_loop_1_fu_145_ap_ready : STD_LOGIC;
    signal indvar1_cast7_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_AXI_Lite_RGB_1_N_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_AXI_Lite_RGB_1_N_WREADY : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_condition_400 : BOOLEAN;

    component dataflow_parent_loop_1 IS
    port (
        m_axi_rgb1_in_AWVALID : OUT STD_LOGIC;
        m_axi_rgb1_in_AWREADY : IN STD_LOGIC;
        m_axi_rgb1_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb1_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb1_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rgb1_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb1_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb1_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb1_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rgb1_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb1_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb1_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_WVALID : OUT STD_LOGIC;
        m_axi_rgb1_in_WREADY : IN STD_LOGIC;
        m_axi_rgb1_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb1_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb1_in_WLAST : OUT STD_LOGIC;
        m_axi_rgb1_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_ARVALID : OUT STD_LOGIC;
        m_axi_rgb1_in_ARREADY : IN STD_LOGIC;
        m_axi_rgb1_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb1_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb1_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rgb1_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb1_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb1_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb1_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rgb1_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb1_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb1_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_RVALID : IN STD_LOGIC;
        m_axi_rgb1_in_RREADY : OUT STD_LOGIC;
        m_axi_rgb1_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb1_in_RLAST : IN STD_LOGIC;
        m_axi_rgb1_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb1_in_BVALID : IN STD_LOGIC;
        m_axi_rgb1_in_BREADY : OUT STD_LOGIC;
        m_axi_rgb1_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb1_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb1_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        rgb1_in1 : IN STD_LOGIC_VECTOR (29 downto 0);
        m_axi_rgb2_in_AWVALID : OUT STD_LOGIC;
        m_axi_rgb2_in_AWREADY : IN STD_LOGIC;
        m_axi_rgb2_in_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb2_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb2_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rgb2_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb2_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb2_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb2_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rgb2_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb2_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb2_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_WVALID : OUT STD_LOGIC;
        m_axi_rgb2_in_WREADY : IN STD_LOGIC;
        m_axi_rgb2_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb2_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb2_in_WLAST : OUT STD_LOGIC;
        m_axi_rgb2_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_ARVALID : OUT STD_LOGIC;
        m_axi_rgb2_in_ARREADY : IN STD_LOGIC;
        m_axi_rgb2_in_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb2_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb2_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rgb2_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb2_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb2_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb2_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_rgb2_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb2_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_rgb2_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_RVALID : IN STD_LOGIC;
        m_axi_rgb2_in_RREADY : OUT STD_LOGIC;
        m_axi_rgb2_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_rgb2_in_RLAST : IN STD_LOGIC;
        m_axi_rgb2_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb2_in_BVALID : IN STD_LOGIC;
        m_axi_rgb2_in_BREADY : OUT STD_LOGIC;
        m_axi_rgb2_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_rgb2_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_rgb2_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        rgb2_in3 : IN STD_LOGIC_VECTOR (29 downto 0);
        n_Mat_buff_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        n_Mat_buff_ce0 : OUT STD_LOGIC;
        n_Mat_buff_d0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        n_Mat_buff_q0 : IN STD_LOGIC_VECTOR (17 downto 0);
        n_Mat_buff_we0 : OUT STD_LOGIC;
        n_Mat_buff_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        n_Mat_buff_ce1 : OUT STD_LOGIC;
        n_Mat_buff_d1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        n_Mat_buff_q1 : IN STD_LOGIC_VECTOR (17 downto 0);
        n_Mat_buff_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        rgb1_in1_ap_vld : IN STD_LOGIC;
        rgb2_in3_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component square_check_n_MakbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (17 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component square_check_AXI_Lite_RGB_1_N_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        rgb1_in : OUT STD_LOGIC_VECTOR (31 downto 0);
        n_Mat_out : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component square_check_AXI_Lite_RGB_2_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rgb2_in : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component square_check_AXI_Lite_RGB_1_N_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component square_check_AXI_Lite_RGB_2_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    square_check_AXI_Lite_RGB_1_N_s_axi_U : component square_check_AXI_Lite_RGB_1_N_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXI_LITE_RGB_1_N_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXI_LITE_RGB_1_N_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXI_Lite_RGB_1_N_AWVALID,
        AWREADY => s_axi_AXI_Lite_RGB_1_N_AWREADY,
        AWADDR => s_axi_AXI_Lite_RGB_1_N_AWADDR,
        WVALID => s_axi_AXI_Lite_RGB_1_N_WVALID,
        WREADY => s_axi_AXI_Lite_RGB_1_N_WREADY,
        WDATA => s_axi_AXI_Lite_RGB_1_N_WDATA,
        WSTRB => s_axi_AXI_Lite_RGB_1_N_WSTRB,
        ARVALID => s_axi_AXI_Lite_RGB_1_N_ARVALID,
        ARREADY => s_axi_AXI_Lite_RGB_1_N_ARREADY,
        ARADDR => s_axi_AXI_Lite_RGB_1_N_ARADDR,
        RVALID => s_axi_AXI_Lite_RGB_1_N_RVALID,
        RREADY => s_axi_AXI_Lite_RGB_1_N_RREADY,
        RDATA => s_axi_AXI_Lite_RGB_1_N_RDATA,
        RRESP => s_axi_AXI_Lite_RGB_1_N_RRESP,
        BVALID => s_axi_AXI_Lite_RGB_1_N_BVALID,
        BREADY => s_axi_AXI_Lite_RGB_1_N_BREADY,
        BRESP => s_axi_AXI_Lite_RGB_1_N_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        rgb1_in => rgb1_in,
        n_Mat_out => n_Mat_out);

    square_check_AXI_Lite_RGB_2_s_axi_U : component square_check_AXI_Lite_RGB_2_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXI_LITE_RGB_2_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXI_LITE_RGB_2_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXI_Lite_RGB_2_AWVALID,
        AWREADY => s_axi_AXI_Lite_RGB_2_AWREADY,
        AWADDR => s_axi_AXI_Lite_RGB_2_AWADDR,
        WVALID => s_axi_AXI_Lite_RGB_2_WVALID,
        WREADY => s_axi_AXI_Lite_RGB_2_WREADY,
        WDATA => s_axi_AXI_Lite_RGB_2_WDATA,
        WSTRB => s_axi_AXI_Lite_RGB_2_WSTRB,
        ARVALID => s_axi_AXI_Lite_RGB_2_ARVALID,
        ARREADY => s_axi_AXI_Lite_RGB_2_ARREADY,
        ARADDR => s_axi_AXI_Lite_RGB_2_ARADDR,
        RVALID => s_axi_AXI_Lite_RGB_2_RVALID,
        RREADY => s_axi_AXI_Lite_RGB_2_RREADY,
        RDATA => s_axi_AXI_Lite_RGB_2_RDATA,
        RRESP => s_axi_AXI_Lite_RGB_2_RRESP,
        BVALID => s_axi_AXI_Lite_RGB_2_BVALID,
        BREADY => s_axi_AXI_Lite_RGB_2_BREADY,
        BRESP => s_axi_AXI_Lite_RGB_2_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rgb2_in => rgb2_in);

    square_check_AXI_Lite_RGB_1_N_m_axi_U : component square_check_AXI_Lite_RGB_1_N_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_AXI_LITE_RGB_1_N_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_AXI_LITE_RGB_1_N_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_AXI_LITE_RGB_1_N_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AXI_LITE_RGB_1_N_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_AXI_LITE_RGB_1_N_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_AXI_LITE_RGB_1_N_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_AXI_LITE_RGB_1_N_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_AXI_LITE_RGB_1_N_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_AXI_LITE_RGB_1_N_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_AXI_LITE_RGB_1_N_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_AXI_LITE_RGB_1_N_CACHE_VALUE)
    port map (
        AWVALID => m_axi_AXI_Lite_RGB_1_N_AWVALID,
        AWREADY => m_axi_AXI_Lite_RGB_1_N_AWREADY,
        AWADDR => m_axi_AXI_Lite_RGB_1_N_AWADDR,
        AWID => m_axi_AXI_Lite_RGB_1_N_AWID,
        AWLEN => m_axi_AXI_Lite_RGB_1_N_AWLEN,
        AWSIZE => m_axi_AXI_Lite_RGB_1_N_AWSIZE,
        AWBURST => m_axi_AXI_Lite_RGB_1_N_AWBURST,
        AWLOCK => m_axi_AXI_Lite_RGB_1_N_AWLOCK,
        AWCACHE => m_axi_AXI_Lite_RGB_1_N_AWCACHE,
        AWPROT => m_axi_AXI_Lite_RGB_1_N_AWPROT,
        AWQOS => m_axi_AXI_Lite_RGB_1_N_AWQOS,
        AWREGION => m_axi_AXI_Lite_RGB_1_N_AWREGION,
        AWUSER => m_axi_AXI_Lite_RGB_1_N_AWUSER,
        WVALID => m_axi_AXI_Lite_RGB_1_N_WVALID,
        WREADY => m_axi_AXI_Lite_RGB_1_N_WREADY,
        WDATA => m_axi_AXI_Lite_RGB_1_N_WDATA,
        WSTRB => m_axi_AXI_Lite_RGB_1_N_WSTRB,
        WLAST => m_axi_AXI_Lite_RGB_1_N_WLAST,
        WID => m_axi_AXI_Lite_RGB_1_N_WID,
        WUSER => m_axi_AXI_Lite_RGB_1_N_WUSER,
        ARVALID => m_axi_AXI_Lite_RGB_1_N_ARVALID,
        ARREADY => m_axi_AXI_Lite_RGB_1_N_ARREADY,
        ARADDR => m_axi_AXI_Lite_RGB_1_N_ARADDR,
        ARID => m_axi_AXI_Lite_RGB_1_N_ARID,
        ARLEN => m_axi_AXI_Lite_RGB_1_N_ARLEN,
        ARSIZE => m_axi_AXI_Lite_RGB_1_N_ARSIZE,
        ARBURST => m_axi_AXI_Lite_RGB_1_N_ARBURST,
        ARLOCK => m_axi_AXI_Lite_RGB_1_N_ARLOCK,
        ARCACHE => m_axi_AXI_Lite_RGB_1_N_ARCACHE,
        ARPROT => m_axi_AXI_Lite_RGB_1_N_ARPROT,
        ARQOS => m_axi_AXI_Lite_RGB_1_N_ARQOS,
        ARREGION => m_axi_AXI_Lite_RGB_1_N_ARREGION,
        ARUSER => m_axi_AXI_Lite_RGB_1_N_ARUSER,
        RVALID => m_axi_AXI_Lite_RGB_1_N_RVALID,
        RREADY => m_axi_AXI_Lite_RGB_1_N_RREADY,
        RDATA => m_axi_AXI_Lite_RGB_1_N_RDATA,
        RLAST => m_axi_AXI_Lite_RGB_1_N_RLAST,
        RID => m_axi_AXI_Lite_RGB_1_N_RID,
        RUSER => m_axi_AXI_Lite_RGB_1_N_RUSER,
        RRESP => m_axi_AXI_Lite_RGB_1_N_RRESP,
        BVALID => m_axi_AXI_Lite_RGB_1_N_BVALID,
        BREADY => m_axi_AXI_Lite_RGB_1_N_BREADY,
        BRESP => m_axi_AXI_Lite_RGB_1_N_BRESP,
        BID => m_axi_AXI_Lite_RGB_1_N_BID,
        BUSER => m_axi_AXI_Lite_RGB_1_N_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => AXI_Lite_RGB_1_N_ARVALID,
        I_ARREADY => AXI_Lite_RGB_1_N_ARREADY,
        I_ARADDR => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARADDR,
        I_ARID => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARID,
        I_ARLEN => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARLEN,
        I_ARSIZE => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARSIZE,
        I_ARLOCK => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARLOCK,
        I_ARCACHE => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARCACHE,
        I_ARQOS => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARQOS,
        I_ARPROT => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARPROT,
        I_ARUSER => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARUSER,
        I_ARBURST => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARBURST,
        I_ARREGION => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARREGION,
        I_RVALID => AXI_Lite_RGB_1_N_RVALID,
        I_RREADY => AXI_Lite_RGB_1_N_RREADY,
        I_RDATA => AXI_Lite_RGB_1_N_RDATA,
        I_RID => AXI_Lite_RGB_1_N_RID,
        I_RUSER => AXI_Lite_RGB_1_N_RUSER,
        I_RRESP => AXI_Lite_RGB_1_N_RRESP,
        I_RLAST => AXI_Lite_RGB_1_N_RLAST,
        I_AWVALID => AXI_Lite_RGB_1_N_AWVALID,
        I_AWREADY => AXI_Lite_RGB_1_N_AWREADY,
        I_AWADDR => tmp_fu_189_p1,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_C00,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => AXI_Lite_RGB_1_N_WVALID,
        I_WREADY => AXI_Lite_RGB_1_N_WREADY,
        I_WDATA => AXI_Lite_RGB_1_N_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => AXI_Lite_RGB_1_N_BVALID,
        I_BREADY => AXI_Lite_RGB_1_N_BREADY,
        I_BRESP => AXI_Lite_RGB_1_N_BRESP,
        I_BID => AXI_Lite_RGB_1_N_BID,
        I_BUSER => AXI_Lite_RGB_1_N_BUSER);

    square_check_AXI_Lite_RGB_2_m_axi_U : component square_check_AXI_Lite_RGB_2_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_AXI_LITE_RGB_2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_AXI_LITE_RGB_2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_AXI_LITE_RGB_2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_AXI_LITE_RGB_2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_AXI_LITE_RGB_2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_AXI_LITE_RGB_2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_AXI_LITE_RGB_2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_AXI_LITE_RGB_2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_AXI_LITE_RGB_2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_AXI_LITE_RGB_2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_AXI_LITE_RGB_2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_AXI_Lite_RGB_2_AWVALID,
        AWREADY => m_axi_AXI_Lite_RGB_2_AWREADY,
        AWADDR => m_axi_AXI_Lite_RGB_2_AWADDR,
        AWID => m_axi_AXI_Lite_RGB_2_AWID,
        AWLEN => m_axi_AXI_Lite_RGB_2_AWLEN,
        AWSIZE => m_axi_AXI_Lite_RGB_2_AWSIZE,
        AWBURST => m_axi_AXI_Lite_RGB_2_AWBURST,
        AWLOCK => m_axi_AXI_Lite_RGB_2_AWLOCK,
        AWCACHE => m_axi_AXI_Lite_RGB_2_AWCACHE,
        AWPROT => m_axi_AXI_Lite_RGB_2_AWPROT,
        AWQOS => m_axi_AXI_Lite_RGB_2_AWQOS,
        AWREGION => m_axi_AXI_Lite_RGB_2_AWREGION,
        AWUSER => m_axi_AXI_Lite_RGB_2_AWUSER,
        WVALID => m_axi_AXI_Lite_RGB_2_WVALID,
        WREADY => m_axi_AXI_Lite_RGB_2_WREADY,
        WDATA => m_axi_AXI_Lite_RGB_2_WDATA,
        WSTRB => m_axi_AXI_Lite_RGB_2_WSTRB,
        WLAST => m_axi_AXI_Lite_RGB_2_WLAST,
        WID => m_axi_AXI_Lite_RGB_2_WID,
        WUSER => m_axi_AXI_Lite_RGB_2_WUSER,
        ARVALID => m_axi_AXI_Lite_RGB_2_ARVALID,
        ARREADY => m_axi_AXI_Lite_RGB_2_ARREADY,
        ARADDR => m_axi_AXI_Lite_RGB_2_ARADDR,
        ARID => m_axi_AXI_Lite_RGB_2_ARID,
        ARLEN => m_axi_AXI_Lite_RGB_2_ARLEN,
        ARSIZE => m_axi_AXI_Lite_RGB_2_ARSIZE,
        ARBURST => m_axi_AXI_Lite_RGB_2_ARBURST,
        ARLOCK => m_axi_AXI_Lite_RGB_2_ARLOCK,
        ARCACHE => m_axi_AXI_Lite_RGB_2_ARCACHE,
        ARPROT => m_axi_AXI_Lite_RGB_2_ARPROT,
        ARQOS => m_axi_AXI_Lite_RGB_2_ARQOS,
        ARREGION => m_axi_AXI_Lite_RGB_2_ARREGION,
        ARUSER => m_axi_AXI_Lite_RGB_2_ARUSER,
        RVALID => m_axi_AXI_Lite_RGB_2_RVALID,
        RREADY => m_axi_AXI_Lite_RGB_2_RREADY,
        RDATA => m_axi_AXI_Lite_RGB_2_RDATA,
        RLAST => m_axi_AXI_Lite_RGB_2_RLAST,
        RID => m_axi_AXI_Lite_RGB_2_RID,
        RUSER => m_axi_AXI_Lite_RGB_2_RUSER,
        RRESP => m_axi_AXI_Lite_RGB_2_RRESP,
        BVALID => m_axi_AXI_Lite_RGB_2_BVALID,
        BREADY => m_axi_AXI_Lite_RGB_2_BREADY,
        BRESP => m_axi_AXI_Lite_RGB_2_BRESP,
        BID => m_axi_AXI_Lite_RGB_2_BID,
        BUSER => m_axi_AXI_Lite_RGB_2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => AXI_Lite_RGB_2_ARVALID,
        I_ARREADY => AXI_Lite_RGB_2_ARREADY,
        I_ARADDR => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARADDR,
        I_ARID => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARID,
        I_ARLEN => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARLEN,
        I_ARSIZE => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARSIZE,
        I_ARLOCK => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARLOCK,
        I_ARCACHE => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARCACHE,
        I_ARQOS => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARQOS,
        I_ARPROT => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARPROT,
        I_ARUSER => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARUSER,
        I_ARBURST => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARBURST,
        I_ARREGION => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARREGION,
        I_RVALID => AXI_Lite_RGB_2_RVALID,
        I_RREADY => AXI_Lite_RGB_2_RREADY,
        I_RDATA => AXI_Lite_RGB_2_RDATA,
        I_RID => AXI_Lite_RGB_2_RID,
        I_RUSER => AXI_Lite_RGB_2_RUSER,
        I_RRESP => AXI_Lite_RGB_2_RRESP,
        I_RLAST => AXI_Lite_RGB_2_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => AXI_Lite_RGB_2_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => AXI_Lite_RGB_2_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => AXI_Lite_RGB_2_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => AXI_Lite_RGB_2_BRESP,
        I_BID => AXI_Lite_RGB_2_BID,
        I_BUSER => AXI_Lite_RGB_2_BUSER);

    n_Mat_buff_U : component square_check_n_MakbM
    generic map (
        DataWidth => 18,
        AddressRange => 3072,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => n_Mat_buff_address0,
        ce0 => n_Mat_buff_ce0,
        we0 => n_Mat_buff_we0,
        d0 => grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_d0,
        q0 => n_Mat_buff_q0);

    grp_dataflow_parent_loop_1_fu_145 : component dataflow_parent_loop_1
    port map (
        m_axi_rgb1_in_AWVALID => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWVALID,
        m_axi_rgb1_in_AWREADY => ap_const_logic_0,
        m_axi_rgb1_in_AWADDR => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWADDR,
        m_axi_rgb1_in_AWID => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWID,
        m_axi_rgb1_in_AWLEN => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWLEN,
        m_axi_rgb1_in_AWSIZE => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWSIZE,
        m_axi_rgb1_in_AWBURST => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWBURST,
        m_axi_rgb1_in_AWLOCK => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWLOCK,
        m_axi_rgb1_in_AWCACHE => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWCACHE,
        m_axi_rgb1_in_AWPROT => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWPROT,
        m_axi_rgb1_in_AWQOS => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWQOS,
        m_axi_rgb1_in_AWREGION => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWREGION,
        m_axi_rgb1_in_AWUSER => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_AWUSER,
        m_axi_rgb1_in_WVALID => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_WVALID,
        m_axi_rgb1_in_WREADY => ap_const_logic_0,
        m_axi_rgb1_in_WDATA => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_WDATA,
        m_axi_rgb1_in_WSTRB => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_WSTRB,
        m_axi_rgb1_in_WLAST => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_WLAST,
        m_axi_rgb1_in_WID => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_WID,
        m_axi_rgb1_in_WUSER => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_WUSER,
        m_axi_rgb1_in_ARVALID => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARVALID,
        m_axi_rgb1_in_ARREADY => AXI_Lite_RGB_1_N_ARREADY,
        m_axi_rgb1_in_ARADDR => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARADDR,
        m_axi_rgb1_in_ARID => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARID,
        m_axi_rgb1_in_ARLEN => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARLEN,
        m_axi_rgb1_in_ARSIZE => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARSIZE,
        m_axi_rgb1_in_ARBURST => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARBURST,
        m_axi_rgb1_in_ARLOCK => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARLOCK,
        m_axi_rgb1_in_ARCACHE => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARCACHE,
        m_axi_rgb1_in_ARPROT => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARPROT,
        m_axi_rgb1_in_ARQOS => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARQOS,
        m_axi_rgb1_in_ARREGION => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARREGION,
        m_axi_rgb1_in_ARUSER => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARUSER,
        m_axi_rgb1_in_RVALID => AXI_Lite_RGB_1_N_RVALID,
        m_axi_rgb1_in_RREADY => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_RREADY,
        m_axi_rgb1_in_RDATA => AXI_Lite_RGB_1_N_RDATA,
        m_axi_rgb1_in_RLAST => AXI_Lite_RGB_1_N_RLAST,
        m_axi_rgb1_in_RID => AXI_Lite_RGB_1_N_RID,
        m_axi_rgb1_in_RUSER => AXI_Lite_RGB_1_N_RUSER,
        m_axi_rgb1_in_RRESP => AXI_Lite_RGB_1_N_RRESP,
        m_axi_rgb1_in_BVALID => ap_const_logic_0,
        m_axi_rgb1_in_BREADY => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_BREADY,
        m_axi_rgb1_in_BRESP => ap_const_lv2_0,
        m_axi_rgb1_in_BID => ap_const_lv1_0,
        m_axi_rgb1_in_BUSER => ap_const_lv1_0,
        rgb1_in1 => rgb1_in1_reg_230,
        m_axi_rgb2_in_AWVALID => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWVALID,
        m_axi_rgb2_in_AWREADY => ap_const_logic_0,
        m_axi_rgb2_in_AWADDR => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWADDR,
        m_axi_rgb2_in_AWID => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWID,
        m_axi_rgb2_in_AWLEN => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWLEN,
        m_axi_rgb2_in_AWSIZE => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWSIZE,
        m_axi_rgb2_in_AWBURST => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWBURST,
        m_axi_rgb2_in_AWLOCK => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWLOCK,
        m_axi_rgb2_in_AWCACHE => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWCACHE,
        m_axi_rgb2_in_AWPROT => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWPROT,
        m_axi_rgb2_in_AWQOS => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWQOS,
        m_axi_rgb2_in_AWREGION => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWREGION,
        m_axi_rgb2_in_AWUSER => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_AWUSER,
        m_axi_rgb2_in_WVALID => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_WVALID,
        m_axi_rgb2_in_WREADY => ap_const_logic_0,
        m_axi_rgb2_in_WDATA => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_WDATA,
        m_axi_rgb2_in_WSTRB => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_WSTRB,
        m_axi_rgb2_in_WLAST => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_WLAST,
        m_axi_rgb2_in_WID => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_WID,
        m_axi_rgb2_in_WUSER => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_WUSER,
        m_axi_rgb2_in_ARVALID => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARVALID,
        m_axi_rgb2_in_ARREADY => AXI_Lite_RGB_2_ARREADY,
        m_axi_rgb2_in_ARADDR => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARADDR,
        m_axi_rgb2_in_ARID => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARID,
        m_axi_rgb2_in_ARLEN => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARLEN,
        m_axi_rgb2_in_ARSIZE => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARSIZE,
        m_axi_rgb2_in_ARBURST => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARBURST,
        m_axi_rgb2_in_ARLOCK => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARLOCK,
        m_axi_rgb2_in_ARCACHE => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARCACHE,
        m_axi_rgb2_in_ARPROT => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARPROT,
        m_axi_rgb2_in_ARQOS => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARQOS,
        m_axi_rgb2_in_ARREGION => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARREGION,
        m_axi_rgb2_in_ARUSER => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARUSER,
        m_axi_rgb2_in_RVALID => AXI_Lite_RGB_2_RVALID,
        m_axi_rgb2_in_RREADY => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_RREADY,
        m_axi_rgb2_in_RDATA => AXI_Lite_RGB_2_RDATA,
        m_axi_rgb2_in_RLAST => AXI_Lite_RGB_2_RLAST,
        m_axi_rgb2_in_RID => AXI_Lite_RGB_2_RID,
        m_axi_rgb2_in_RUSER => AXI_Lite_RGB_2_RUSER,
        m_axi_rgb2_in_RRESP => AXI_Lite_RGB_2_RRESP,
        m_axi_rgb2_in_BVALID => ap_const_logic_0,
        m_axi_rgb2_in_BREADY => grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_BREADY,
        m_axi_rgb2_in_BRESP => ap_const_lv2_0,
        m_axi_rgb2_in_BID => ap_const_lv1_0,
        m_axi_rgb2_in_BUSER => ap_const_lv1_0,
        rgb2_in3 => rgb2_in3_reg_225,
        n_Mat_buff_address0 => grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_address0,
        n_Mat_buff_ce0 => grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_ce0,
        n_Mat_buff_d0 => grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_d0,
        n_Mat_buff_q0 => ap_const_lv18_0,
        n_Mat_buff_we0 => grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_we0,
        n_Mat_buff_address1 => grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_address1,
        n_Mat_buff_ce1 => grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_ce1,
        n_Mat_buff_d1 => grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_d1,
        n_Mat_buff_q1 => ap_const_lv18_0,
        n_Mat_buff_we1 => grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        rgb1_in1_ap_vld => ap_const_logic_1,
        rgb2_in3_ap_vld => ap_const_logic_1,
        ap_done => grp_dataflow_parent_loop_1_fu_145_ap_done,
        ap_start => grp_dataflow_parent_loop_1_fu_145_ap_start,
        ap_ready => grp_dataflow_parent_loop_1_fu_145_ap_ready,
        ap_idle => grp_dataflow_parent_loop_1_fu_145_ap_idle,
        ap_continue => grp_dataflow_parent_loop_1_fu_145_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY))) and not((ap_const_lv1_0 = exitcond1_fu_199_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_AWREADY) or (ap_const_logic_0 = grp_dataflow_parent_loop_1_fu_145_ap_done))))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY))) and (ap_const_lv1_0 = exitcond1_fu_199_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_AWREADY) or (ap_const_logic_0 = grp_dataflow_parent_loop_1_fu_145_ap_done)))) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY))) and not((ap_const_lv1_0 = exitcond1_fu_199_p2))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_AWREADY) or (ap_const_logic_0 = grp_dataflow_parent_loop_1_fu_145_ap_done))))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_dataflow_parent_loop_1_fu_145_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_dataflow_parent_loop_1_fu_145_ap_start <= ap_const_logic_0;
            else
                if ((((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_sync_grp_dataflow_parent_loop_1_fu_145_ap_ready)))) then 
                    ap_reg_grp_dataflow_parent_loop_1_fu_145_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_dataflow_parent_loop_1_fu_145_ap_ready)) then 
                    ap_reg_grp_dataflow_parent_loop_1_fu_145_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_AXI_Lite_RGB_1_N_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_AXI_Lite_RGB_1_N_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state2)) then
                    if (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_AWREADY) or (ap_const_logic_0 = grp_dataflow_parent_loop_1_fu_145_ap_done)))) then 
                        ap_reg_ioackin_AXI_Lite_RGB_1_N_AWREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = AXI_Lite_RGB_1_N_AWREADY) and not((ap_const_logic_0 = grp_dataflow_parent_loop_1_fu_145_ap_done)))) then 
                        ap_reg_ioackin_AXI_Lite_RGB_1_N_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_AXI_Lite_RGB_1_N_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_AXI_Lite_RGB_1_N_WREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 = ap_const_lv1_0))) then
                    if ((ap_condition_400 = ap_const_boolean_1)) then 
                        ap_reg_ioackin_AXI_Lite_RGB_1_N_WREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = AXI_Lite_RGB_1_N_WREADY)) then 
                        ap_reg_ioackin_AXI_Lite_RGB_1_N_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_1_fu_145_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_1_fu_145_ap_ready <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state2)) then
                    if (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_AWREADY) or (ap_const_logic_0 = grp_dataflow_parent_loop_1_fu_145_ap_done)))) then 
                        ap_sync_reg_grp_dataflow_parent_loop_1_fu_145_ap_ready <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = grp_dataflow_parent_loop_1_fu_145_ap_ready)) then 
                        ap_sync_reg_grp_dataflow_parent_loop_1_fu_145_ap_ready <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    indvar1_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_AWREADY) or (ap_const_logic_0 = grp_dataflow_parent_loop_1_fu_145_ap_done))))) then 
                indvar1_reg_134 <= ap_const_lv12_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond1_fu_199_p2))) then 
                indvar1_reg_134 <= indvar_next1_fu_205_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY))))) then
                ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 <= exitcond1_reg_240;
                exitcond1_reg_240 <= exitcond1_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY))) and (exitcond1_reg_240 = ap_const_lv1_0))) then
                n_Mat_buff_load_reg_254 <= n_Mat_buff_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                n_Mat_out5_reg_220 <= n_Mat_out(31 downto 2);
                rgb1_in1_reg_230 <= rgb1_in(31 downto 2);
                rgb2_in3_reg_225 <= rgb2_in(31 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond1_reg_240, AXI_Lite_RGB_1_N_BVALID, ap_sig_ioackin_AXI_Lite_RGB_1_N_AWREADY, grp_dataflow_parent_loop_1_fu_145_ap_done, exitcond1_fu_199_p2, ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_AWREADY) or (ap_const_logic_0 = grp_dataflow_parent_loop_1_fu_145_ap_done)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY))) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) and not((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond1_fu_199_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY))) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))) or (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond1_fu_199_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (not((AXI_Lite_RGB_1_N_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;

    AXI_Lite_RGB_1_N_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARVALID)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_CS_fsm_state1 = ap_const_lv1_1)))) then 
            AXI_Lite_RGB_1_N_ARVALID <= grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_ARVALID;
        else 
            AXI_Lite_RGB_1_N_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    AXI_Lite_RGB_1_N_AWVALID_assign_proc : process(ap_CS_fsm_state2, grp_dataflow_parent_loop_1_fu_145_ap_done, ap_reg_ioackin_AXI_Lite_RGB_1_N_AWREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_logic_0 = grp_dataflow_parent_loop_1_fu_145_ap_done)) and (ap_const_logic_0 = ap_reg_ioackin_AXI_Lite_RGB_1_N_AWREADY))) then 
            AXI_Lite_RGB_1_N_AWVALID <= ap_const_logic_1;
        else 
            AXI_Lite_RGB_1_N_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    AXI_Lite_RGB_1_N_BREADY_assign_proc : process(ap_CS_fsm_state10, AXI_Lite_RGB_1_N_BVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((AXI_Lite_RGB_1_N_BVALID = ap_const_logic_0)))) then 
            AXI_Lite_RGB_1_N_BREADY <= ap_const_logic_1;
        else 
            AXI_Lite_RGB_1_N_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    AXI_Lite_RGB_1_N_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_RREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_CS_fsm_state1 = ap_const_lv1_1)))) then 
            AXI_Lite_RGB_1_N_RREADY <= grp_dataflow_parent_loop_1_fu_145_m_axi_rgb1_in_RREADY;
        else 
            AXI_Lite_RGB_1_N_RREADY <= ap_const_logic_0;
        end if; 
    end process;

        AXI_Lite_RGB_1_N_WDATA <= std_logic_vector(resize(signed(n_Mat_buff_load_reg_254),32));


    AXI_Lite_RGB_1_N_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond1_reg_240, ap_reg_ioackin_AXI_Lite_RGB_1_N_WREADY)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 = ap_const_lv1_0) and (ap_const_logic_0 = ap_reg_ioackin_AXI_Lite_RGB_1_N_WREADY))) then 
            AXI_Lite_RGB_1_N_WVALID <= ap_const_logic_1;
        else 
            AXI_Lite_RGB_1_N_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    AXI_Lite_RGB_1_N_blk_n_AW_assign_proc : process(m_axi_AXI_Lite_RGB_1_N_AWREADY, ap_CS_fsm_state2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            AXI_Lite_RGB_1_N_blk_n_AW <= m_axi_AXI_Lite_RGB_1_N_AWREADY;
        else 
            AXI_Lite_RGB_1_N_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    AXI_Lite_RGB_1_N_blk_n_B_assign_proc : process(m_axi_AXI_Lite_RGB_1_N_BVALID, ap_CS_fsm_state10)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10))) then 
            AXI_Lite_RGB_1_N_blk_n_B <= m_axi_AXI_Lite_RGB_1_N_BVALID;
        else 
            AXI_Lite_RGB_1_N_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    AXI_Lite_RGB_1_N_blk_n_W_assign_proc : process(m_axi_AXI_Lite_RGB_1_N_WREADY, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond1_reg_240)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 = ap_const_lv1_0))) then 
            AXI_Lite_RGB_1_N_blk_n_W <= m_axi_AXI_Lite_RGB_1_N_WREADY;
        else 
            AXI_Lite_RGB_1_N_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    AXI_Lite_RGB_2_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARVALID)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_CS_fsm_state1 = ap_const_lv1_1)))) then 
            AXI_Lite_RGB_2_ARVALID <= grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_ARVALID;
        else 
            AXI_Lite_RGB_2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    AXI_Lite_RGB_2_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_RREADY)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2)) or ((ap_CS_fsm_state1 = ap_const_lv1_1)))) then 
            AXI_Lite_RGB_2_RREADY <= grp_dataflow_parent_loop_1_fu_145_m_axi_rgb2_in_RREADY;
        else 
            AXI_Lite_RGB_2_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7 downto 7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);

    ap_condition_400_assign_proc : process(ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond1_reg_240, ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY)
    begin
                ap_condition_400 <= not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state10, AXI_Lite_RGB_1_N_BVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((AXI_Lite_RGB_1_N_BVALID = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10, AXI_Lite_RGB_1_N_BVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state10) and not((AXI_Lite_RGB_1_N_BVALID = ap_const_logic_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_AXI_Lite_RGB_1_N_AWREADY_assign_proc : process(AXI_Lite_RGB_1_N_AWREADY, ap_reg_ioackin_AXI_Lite_RGB_1_N_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_AXI_Lite_RGB_1_N_AWREADY)) then 
            ap_sig_ioackin_AXI_Lite_RGB_1_N_AWREADY <= AXI_Lite_RGB_1_N_AWREADY;
        else 
            ap_sig_ioackin_AXI_Lite_RGB_1_N_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY_assign_proc : process(AXI_Lite_RGB_1_N_WREADY, ap_reg_ioackin_AXI_Lite_RGB_1_N_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_AXI_Lite_RGB_1_N_WREADY)) then 
            ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY <= AXI_Lite_RGB_1_N_WREADY;
        else 
            ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sync_grp_dataflow_parent_loop_1_fu_145_ap_ready_assign_proc : process(grp_dataflow_parent_loop_1_fu_145_ap_ready, ap_sync_reg_grp_dataflow_parent_loop_1_fu_145_ap_ready)
    begin
        if ((ap_const_logic_0 = ap_sync_reg_grp_dataflow_parent_loop_1_fu_145_ap_ready)) then 
            ap_sync_grp_dataflow_parent_loop_1_fu_145_ap_ready <= grp_dataflow_parent_loop_1_fu_145_ap_ready;
        else 
            ap_sync_grp_dataflow_parent_loop_1_fu_145_ap_ready <= ap_const_logic_1;
        end if; 
    end process;

    exitcond1_fu_199_p2 <= "1" when (indvar1_reg_134 = ap_const_lv12_C00) else "0";

    grp_dataflow_parent_loop_1_fu_145_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_sig_ioackin_AXI_Lite_RGB_1_N_AWREADY, grp_dataflow_parent_loop_1_fu_145_ap_done)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not(((ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_AWREADY) or (ap_const_logic_0 = grp_dataflow_parent_loop_1_fu_145_ap_done))))) then 
            grp_dataflow_parent_loop_1_fu_145_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_1_fu_145_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_1_fu_145_ap_start <= ap_reg_grp_dataflow_parent_loop_1_fu_145_ap_start;
    indvar1_cast7_fu_211_p1 <= std_logic_vector(resize(unsigned(indvar1_reg_134),32));
    indvar_next1_fu_205_p2 <= std_logic_vector(unsigned(indvar1_reg_134) + unsigned(ap_const_lv12_1));

    n_Mat_buff_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_address0, indvar1_cast7_fu_211_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            n_Mat_buff_address0 <= indvar1_cast7_fu_211_p1(12 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            n_Mat_buff_address0 <= grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_address0;
        else 
            n_Mat_buff_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    n_Mat_buff_ce0_assign_proc : process(ap_CS_fsm_state2, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond1_reg_240, ap_CS_fsm_pp0_stage0, ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY, ap_enable_reg_pp0_iter0, grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_ce0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_pipeline_reg_pp0_iter1_exitcond1_reg_240 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_AXI_Lite_RGB_1_N_WREADY))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then 
            n_Mat_buff_ce0 <= ap_const_logic_1;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            n_Mat_buff_ce0 <= grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_ce0;
        else 
            n_Mat_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    n_Mat_buff_we0_assign_proc : process(ap_CS_fsm_state2, grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_we0)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            n_Mat_buff_we0 <= grp_dataflow_parent_loop_1_fu_145_n_Mat_buff_we0;
        else 
            n_Mat_buff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_189_p1 <= std_logic_vector(resize(unsigned(n_Mat_out5_reg_220),32));
end behav;
